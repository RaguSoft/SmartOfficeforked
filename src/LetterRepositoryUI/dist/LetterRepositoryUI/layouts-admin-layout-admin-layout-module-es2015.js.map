{"version":3,"sources":["./node_modules/ngx-mat-select-search/fesm2015/ngx-mat-select-search.js","./src/app/pages/commonviewpage/commonviewpage.component.html","./src/app/pages/configurations/configurations.component.html","./src/app/pages/dashboard/dashboard.component.html","./src/app/pages/department/department.component.html","./src/app/pages/letter/letter.component.html","./src/app/pages/letterview/letterview.component.html","./src/app/pages/matselect/matselect.component.html","./src/app/pages/userprofile/userprofile.component.html","./src/app/pages/view/view.component.html","./src/app/common/models/department.ts","./src/app/common/models/letter.ts","./src/app/common/models/user.ts","./src/app/common/services/common.service.ts","./src/app/layouts/admin-layout/admin-layout.module.ts","./src/app/layouts/admin-layout/admin-layout.routing.ts","./src/app/pages/commonviewpage/commonviewpage.component.css","./src/app/pages/commonviewpage/commonviewpage.component.ts","./src/app/pages/configurations/configurations.component.css","./src/app/pages/configurations/configurations.component.ts","./src/app/pages/dashboard/dashboard.component.css","./src/app/pages/dashboard/dashboard.component.ts","./src/app/pages/department/department.component.css","./src/app/pages/department/department.component.ts","./src/app/pages/letter/letter.component.css","./src/app/pages/letter/letter.component.ts","./src/app/pages/letterview/letterview.component.css","./src/app/pages/letterview/letterview.component.ts","./src/app/pages/matselect/matselect.component.css","./src/app/pages/matselect/matselect.component.ts","./src/app/pages/userprofile/userprofile.component.css","./src/app/pages/userprofile/userprofile.component.ts","./src/app/pages/view/view.component.css","./src/app/pages/view/view.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmD;AACwB;AACpB;AACxB;AACyB;AACgK;AACV;AAC/J;;AAE/C;AACA;AACA,cAAc,uEAAuE;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA,aAAa;AACb;;AAEA;AACA;AACA,cAAc,uEAAuE;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,wBAAwB,GAAG,wBAAwB,GAAG,wBAAwB;AAC7G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,0DAAY;AACzC,gCAAgC;AAChC,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,0DAAY;AACtC;AACA;AACA;AACA,8BAA8B,4CAAO;AACrC;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,4DAAK,KAAK,gEAAS;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,2DAAI;AACtB,kBAAkB,gEAAS;AAC3B;AACA;AACA,uDAAuD,gEAAS;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,gEAAS;AAC/B;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,kBAAkB,gEAAS;AAC3B;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,gEAAS;AAC3B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,2DAAI,KAAK,gEAAS;AACpC;AACA,sBAAsB,gEAAS;AAC/B;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,8BAA8B,uDAAC,qBAAqB,uDAAC;AACrD,8BAA8B,0DAAI,qBAAqB,0DAAI;AAC3D,+BAA+B,2DAAK;AACpC,wEAAwE,0DAAI,sBAAsB,yDAAG;AACrG;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gEAAS;AAC3B;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gEAAS;AAC3B;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB,+BAA+B,uFAA6B;AAC5D;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB,uDAAuD,yEAAuB;AAC9E,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA,qHAAqH,yEAAuB;AAC5I;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA,8bAA8b,6HAA6H,spCAAspC,oWAAoW,qBAAqB;AAC1kE;AACA;AACA,iCAAiC,gEAAiB;AAClD,qCAAqC,gEAAU;AAC/C;AACA;AACA;AACA,iCAAiC,qEAAuB;AACxD,oDAAoD,kBAAkB,yBAAyB,kBAAkB,MAAM,WAAW,wBAAwB,0BAA0B,YAAY,kBAAkB,gBAAgB,gBAAgB,qCAAqC,0DAA0D,WAAW,6FAA6F,aAAa,mBAAmB,4CAA4C,gBAAgB,kEAAkE,qBAAqB,gCAAgC,iCAAiC,yBAAyB,kBAAkB,yBAAyB,4BAA4B,sBAAsB,oCAAoC,aAAa,yBAAyB,kBAAkB,UAAU,QAAQ,2BAA2B,kBAAkB,WAAW,oBAAoB,mEAAmE,cAAc,iBAAiB,WAAW,gBAAgB,mEAAmE,QAAQ,kFAAkF,iBAAiB,kEAAkE,gBAAgB,UAAU,4EAA4E,eAAe,8FAA8F,aAAa,qGAAqG,WAAW,uCAAuC,kBAAkB,mBAAmB;AACtuD,aAAa;AACb;AACA;AACA;AACA,KAAK,OAAO,2DAAS,gBAAgB,OAAO,oDAAM,SAAS,2DAAS,IAAI,GAAG;AAC3E,KAAK,OAAO,+DAAiB,EAAE;AAC/B,KAAK,OAAO,oEAAa,EAAE;AAC3B,KAAK,OAAO,2DAAS,gBAAgB,OAAO,sDAAQ,EAAE,GAAG,OAAO,oDAAM,SAAS,2DAAS,IAAI;AAC5F;AACA;AACA,wBAAwB,OAAO,mDAAK,EAAE;AACtC,YAAY,OAAO,mDAAK,EAAE;AAC1B,2BAA2B,OAAO,mDAAK,EAAE;AACzC,wBAAwB,OAAO,mDAAK,EAAE;AACtC,iBAAiB,OAAO,mDAAK,EAAE;AAC/B,2BAA2B,OAAO,mDAAK,EAAE;AACzC,oCAAoC,OAAO,mDAAK,EAAE;AAClD,6CAA6C,OAAO,mDAAK,EAAE;AAC3D,iBAAiB,OAAO,mDAAK,EAAE;AAC/B,6BAA6B,OAAO,mDAAK,EAAE;AAC3C,gCAAgC,OAAO,mDAAK,EAAE;AAC9C,sCAAsC,OAAO,mDAAK,EAAE;AACpD,iBAAiB,OAAO,oDAAM,EAAE;AAChC,yBAAyB,OAAO,uDAAS,+BAA+B,OAAO,wDAAU,EAAE,IAAI;AAC/F,yBAAyB,OAAO,uDAAS,+BAA+B,OAAO,wDAAU,EAAE,IAAI;AAC/F,iBAAiB,OAAO,0DAAY,0CAA0C;AAC9E,yBAAyB,OAAO,yDAAW,wDAAwD;AACnG;;AAEA;AACA;AACA,cAAc,uEAAuE;AACrF;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB;AACA,oBAAoB,4DAAY;AAChC,oBAAoB,iEAAe;AACnC,oBAAoB,mEAAiB;AACrC,oBAAoB,+DAAa;AACjC,oBAAoB,gEAAc;AAClC,oBAAoB,0EAAwB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA,cAAc,uEAAuE;AACrF;;AAEA;AACA;AACA,cAAc,uEAAuE;AACrF;;AAE2H;;AAE3H,iD;;;;;;;;;;;ACrrBA,6M;;;;;;;;;;;ACAA,oLAAoL,0EAA0E,mEAAmE,iFAAiF,gPAAgP,kBAAkB,iOAAiO,6DAA6D,qGAAqG,0EAA0E,KAAK,yBAAyB,6FAA6F,8TAA8T,iBAAiB,yQAAyQ,iBAAiB,cAAc,uEAAuE,KAAK,+DAA+D,y6C;;;;;;;;;;;ACA99D,uIAAuI,oBAAoB,sBAAsB,yBAAyB,iC;;;;;;;;;;;ACA1M,qTAAqT,6uF;;;;;;;;;;;ACArT,iTAAiT,m1BAAm1B,i6IAAi6I,87GAA87G,u4C;;;;;;;;;;;ACAn+R,qaAAqa,03CAA03C,iaAAia,iBAAiB,oEAAoE,gBAAgB,KAAK,iBAAiB,oVAAoV,6BAA6B,kCAAkC,mvB;;;;;;;;;;;ACA9sF,qGAAqG,aAAa,8RAA8R,cAAc,0D;;;;;;;;;;;ACA9Z,mSAAmS,m6L;;;;;;;;;;;ACAnS,4fAA4f,mZAAmZ,iBAAiB,kEAAkE,gBAAgB,KAAK,iBAAiB,kUAAkU,6BAA6B,kCAAkC,upCAAupC,mZAAmZ,iBAAiB,kEAAkE,gBAAgB,KAAK,iBAAiB,kUAAkU,6BAA6B,kCAAkC,0qB;;;;;;;;;;;;ACA76G;AAAA;AAAO,MAAM,UAAU;IAAvB;QACI,OAAE,GAAG,CAAC,CAAC;QACP,aAAQ,GAAG,CAAC,CAAC;QACb,mBAAc,GAAG,EAAE,CAAC;QACpB,mBAAc,GAAG,EAAE,CAAC;QACpB,wBAAmB,GAAG,EAAE,CAAC;QACzB,cAAS,GAAG,CAAC,CAAC;IAClB,CAAC;CAAA;;;;;;;;;;;;;ACPD;AAAA;AAAO,MAAM,MAAM;IAAnB;QACI,OAAE,GAAG,CAAC,CAAC;QACP,eAAU,GAAG,qBAAqB,CAAC;QACnC,gBAAW,GAAG,EAAE,CAAC;QACjB,mBAAc,GAAG,CAAC,CAAC;QACnB,iBAAY,GAAG,CAAC,CAAC;QACjB,kBAAa,GAAG,CAAC,CAAC;QAClB,gBAAW,GAAG,IAAI,IAAI,EAAE,CAAC;QACzB,sBAAiB,GAAG,CAAC,CAAC;QACtB,gBAAW,GAAG,EAAE,CAAC;QACjB,cAAS,GAAG,EAAE,CAAC;QACf,WAAM,GAAG,EAAE,CAAC;QACZ,kBAAa,GAAG,CAAC,CAAC;QAClB,aAAQ,GAAG,CAAC,CAAC;QACb,YAAO,GAAG,EAAE,CAAC;QACb,aAAa;QACb,aAAQ,GAAG,EAAE,CAAC;QACd,kBAAa,GAAG,EAAE,CAAC;QACnB,sBAAiB,GAAG,IAAI,IAAI,EAAE,CAAC;IACnC,CAAC;CAAA;;;;;;;;;;;;;ACnBD;AAAA;AAAO,MAAM,IAAI;IAAjB;QACI,OAAE,GAAG,CAAC,CAAC;QACP,aAAQ,GAAG,EAAE,CAAC;QACd,UAAK,GAAG,CAAC,CAAC;QACV,aAAQ,GAAG,EAAE,CAAC;QACd,gBAAW,GAAG,EAAE,CAAC;QACjB,UAAK,GAAG,EAAE,CAAC;QACX,cAAS,GAAG,CAAC,CAAC;QACd,aAAQ,GAAG,EAAE,CAAC;QACd,oBAAe,GAAG,EAAE,CAAC;QACrB,gBAAW,GAAG,IAAI,IAAI,EAAE,CAAC;QACzB,iBAAY,GAAG,CAAC,CAAC;QACjB,WAAM,GAAG,CAAC,CAAC;IACf,CAAC;CAAA;;;;;;;;;;;;;;;;;;;;;;;ACb0C;AAGoB;AACd;AACe;AAC9B;AACO;AAIzC,IAAa,aAAa,GAA1B,MAAa,aAAa;IAIxB,YAAoB,UAAsB,EAAU,MAAc;QAA9C,eAAU,GAAV,UAAU,CAAY;QAAU,WAAM,GAAN,MAAM,CAAQ;QAHlE,YAAO,GAAG,qEAAW,CAAC,OAAO,CAAC;IAI9B,CAAC;IAED,aAAa,CAAC,MAAM;QAClB,MAAM,KAAK,GAAG,CAAC;gBACb,MAAM,EAAE,IAAI;gBACV,OAAO,EAAE,YAAY;aACxB,EAAE;gBACD,MAAM,EAAE,IAAI;gBACV,OAAO,EAAE,MAAM;aAClB;YACD;gBACE,MAAM,EAAE,IAAI;gBACV,OAAO,EAAE,QAAQ;aACpB,EAAE;gBACD,MAAM,EAAE,CAAC;gBACP,OAAO,EAAE,QAAQ;aACpB;SACA,CAAC;QACF,MAAM,GAAG,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,KAAK,QAAQ,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,CAAC;QACjE,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC,EAAE;YAClB,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;SACvB;aAAM;YACL,OAAO,EAAE,CAAC;SACX;IACH,CAAC;IAED,WAAW,CAAC,GAAW;QACrB,IAAI,CAAC,QAAQ,EAAE,CAAC;QAChB,MAAM,WAAW,GAAG;YAClB,OAAO,EAAE,IAAI,gEAAW,CAAC;gBACvB,aAAa,EAAE,SAAS,GAAG,IAAI,CAAC,SAAS;gBACzC,cAAc,EAAE,kBAAkB;aACnC,CAAC;SACH,CAAC;QACF,OAAO,IAAI,CAAC,UAAU;aACnB,GAAG,CAAC,IAAI,CAAC,OAAO,GAAG,GAAG,EAAE,WAAW,CAAC,CAAC,IAAI,CACxC,0DAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EACf,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAC7B,CAAC;IACN,CAAC;IAED,WAAW,CAAC,MAAc,EAAE,EAAU;QACpC,IAAI,CAAC,QAAQ,EAAE,CAAC;QAChB,MAAM,WAAW,GAAG;YAClB,OAAO,EAAE,IAAI,gEAAW,CAAC;gBACvB,aAAa,EAAE,SAAS,GAAG,IAAI,CAAC,SAAS;gBACzC,cAAc,EAAE,kBAAkB;aACnC,CAAC;SACH,CAAC;QACF,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QAC9C,IAAI,UAAU,KAAK,EAAE,EAAE;YACrB,OAAO,IAAI,CAAC,UAAU;iBACnB,GAAG,CAAC,IAAI,CAAC,OAAO,GAAG,UAAU,GAAG,GAAG,GAAG,EAAE,EAAE,WAAW,CAAC;iBACtD,IAAI,CACH,0DAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EACf,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAC7B,CAAC;SACL;aAAM;YACL,uDAAU,CAAC,oBAAoB,CAAC,CAAC;SAClC;IACH,CAAC;IAED,gBAAgB,CAAC,MAAc,EAAE,YAAqB;QACpD,IAAI,CAAC,QAAQ,EAAE,CAAC;QAChB,MAAM,WAAW,GAAG;YAClB,OAAO,EAAE,IAAI,gEAAW,CAAC;gBACvB,aAAa,EAAE,SAAS,GAAG,IAAI,CAAC,SAAS;gBACzC,cAAc,EAAE,kBAAkB;aACnC,CAAC;SACH,CAAC;QACF,gDAAgD;QAChD,OAAO,IAAI,CAAC,UAAU;aACnB,GAAG,CAAC,IAAI,CAAC,OAAO,GAAG,mBAAmB,GAAG,MAAM,GAAG,GAAG,GAAG,YAAY,EAAE,WAAW,CAAC;aAClF,IAAI,CACH,0DAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EACf,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAC7B,CAAC;IACN,CAAC;IAED,iBAAiB,CAAC,EAAU,EAAE,SAAiB,EAAE;QAC/C,IAAI,CAAC,QAAQ,EAAE,CAAC;QAChB,MAAM,WAAW,GAAG;YAClB,OAAO,EAAE,IAAI,gEAAW,CAAC;gBACvB,aAAa,EAAE,SAAS,GAAG,IAAI,CAAC,SAAS;gBACzC,cAAc,EAAE,kBAAkB;aACnC,CAAC;SACH,CAAC;QACF,IAAI,MAAM,KAAK,EAAE,EAAE;YACjB,OAAO,IAAI,CAAC,UAAU;iBACnB,GAAG,CAAC,IAAI,CAAC,OAAO,GAAG,yBAAyB,GAAG,EAAE,EAAE,WAAW,CAAC,CAAC,IAAI,CACnE,0DAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EACf,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAC7B,CAAC;SACL;aAAM;YACL,OAAO,IAAI,CAAC,UAAU;iBACnB,GAAG,CAAC,IAAI,CAAC,OAAO,GAAG,yBAAyB,GAAG,EAAE,GAAG,UAAU,GAAG,MAAM,EAAE,WAAW,CAAC,CAAC,IAAI,CACzF,0DAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EACf,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAC7B,CAAC;SACL;IACH,CAAC;IAED,WAAW,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE;QAC1C,IAAI,CAAC,QAAQ,EAAE,CAAC;QAChB,MAAM,WAAW,GAAG;YAClB,OAAO,EAAE,IAAI,gEAAW,CAAC;gBACvB,aAAa,EAAE,SAAS,GAAG,IAAI,CAAC,SAAS;gBACzC,cAAc,EAAE,kBAAkB;aACnC,CAAC;SACH,CAAC;QACF,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QAC9C,IAAI,UAAU,KAAK,EAAE,EAAE;YAAE,OAAO,uDAAU,CAAC,oBAAoB,CAAC,CAAC;SAAE;QACnE,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,GAAG,UAAU,GAAG,GAAG,GAAG,KAAK;cAC/C,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,MAAM,CAAC;QAC/B,OAAO,IAAI,CAAC,UAAU;aACnB,GAAG,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC,IAAI,CACzB,0DAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EACf,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAC7B,CAAC;IACN,CAAC;IAED,QAAQ,CAAC,GAAQ,EAAE,MAAc,EAAE,EAAU;QAC3C,IAAI,CAAC,QAAQ,EAAE,CAAC;QAChB,MAAM,WAAW,GAAG;YAClB,OAAO,EAAE,IAAI,gEAAW,CAAC;gBACvB,aAAa,EAAE,SAAS,GAAG,IAAI,CAAC,SAAS;gBACzC,cAAc,EAAE,kBAAkB;aACnC,CAAC;SACH,CAAC;QACF,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QAC9C,GAAG,CAAC,IAAI,GAAG,SAAS,CAAC;QACrB,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,UAAU,GAAG,GAAG,GAAG,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,WAAW,CAAC;aAChG,IAAI,CACH,0DAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EACf,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAC7B,CAAC;QACJ;;;;;;;;;;;;;;UAcE;IACJ,CAAC;IAED,WAAW,CAAC,KAAK;QACf,IAAI,YAAY,GAAG,EAAE,CAAC;QACtB,IAAI,KAAK,CAAC,MAAM,IAAI,GAAG,EAAE;YACvB,YAAY,GAAG,yBAAyB,CAAC;YACzC,YAAY,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;SACxC;QACD,IAAI,KAAK,CAAC,KAAK,YAAY,UAAU,EAAE;YACrC,YAAY,GAAG,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC;SACpC;aAAM;YACL,YAAY,GAAG,KAAK,CAAC,KAAK,CAAC,gBAAgB,CAAC;YAC5C,OAAO,CAAC,GAAG,CAAC,cAAc,GAAG,KAAK,CAAC,MAAM,GAAG,gBAAgB,GAAG,KAAK,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;SAC9F;QACD,oCAAoC;QACpC,OAAO,uDAAU,CAAC,YAAY,CAAC,CAAC;IAClC,CAAC;IAED,QAAQ;QACN,IAAI,YAAY,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE;YACvC,MAAM,OAAO,GAAQ,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;YACrE,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,KAAK,CAAC;SAChC;aAAM;YACL,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YACpC,OAAO,KAAK,CAAC;SACd;IACH,CAAC;CACF;;YAnLiC,+DAAU;YAAkB,sDAAM;;AAJvD,aAAa;IAHzB,gEAAU,CAAC;QACV,UAAU,EAAE,MAAM;KACnB,CAAC;GACW,aAAa,CAuLzB;AAvLyB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXe;AACM;AACA;AACmB;AACP;AAChB;AAEQ;AAEgC;AACA;AACN;AACF;AACiB;AACZ;AACH;AACZ;AACG;AACY;AACY;AA0B5F,IAAa,iBAAiB,GAA9B,MAAa,iBAAiB;CAAI;AAArB,iBAAiB;IAxB7B,8DAAQ,CAAC;QACR,OAAO,EAAE;YACP,4DAAY;YACZ,4DAAY,CAAC,QAAQ,CAAC,uEAAiB,CAAC;YACxC,0DAAW;YACX,kEAAmB;YACnB,gEAAc;YACd,+EAAwB;SACzB;QACD,YAAY,EAAE;YACZ,gGAAoB;YACpB,0FAAkB;YAClB,4EAAa;YACb,0EAAW;YACX,0GAAuB;YACvB,8FAAmB;YACnB,2FAAkB;YAClB,kFAAe;YACf,8FAAmB;YACnB,0GAAuB;SACxB;QACD,SAAS,EAAE,CAAC,2FAAoB,EAAE,wDAAQ,CAAC;KAC5C,CAAC;GAEW,iBAAiB,CAAI;AAAJ;;;;;;;;;;;;;AC5C9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6E;AAEe;AACT;AACH;AACH;AACG;AACZ;AACwB;AAGrF,MAAM,iBAAiB,GAAW;IACrC,EAAE,IAAI,EAAE,WAAW,EAAE,SAAS,EAAE,0FAAkB,EAAE;IACpD,EAAE,IAAI,EAAE,eAAe,EAAE,SAAS,EAAE,yGAAuB,EAAE;IAC7D,EAAE,IAAI,EAAE,cAAc,EAAE,SAAS,EAAE,yGAAuB,EAAE;IAC5D,EAAE,IAAI,EAAE,kBAAkB,EAAE,SAAS,EAAE,gGAAoB,EAAE;IAC7D,EAAE,IAAI,EAAE,oBAAoB,EAAE,SAAS,EAAE,yGAAuB,EAAE;IAClE,EAAE,IAAI,EAAE,wBAAwB,EAAE,SAAS,EAAE,6FAAmB,EAAE;IAClE,EAAE,IAAI,EAAE,gBAAgB,EAAE,SAAS,EAAE,6FAAmB,EAAE;IAC1D,EAAE,IAAI,EAAE,oBAAoB,EAAE,SAAS,EAAE,iFAAe,EAAE;IAC1D,EAAE,IAAI,EAAE,QAAQ,EAAE,SAAS,EAAE,0FAAkB,EAAE;CACpD,CAAC;;;;;;;;;;;;ACtBF,+DAA+D,2K;;;;;;;;;;;;;;;;;;ACAb;AACD;AAOjD,IAAa,uBAAuB,GAApC,MAAa,uBAAuB;IAElC,YAAoB,cAA8B;QAA9B,mBAAc,GAAd,cAAc,CAAgB;QADlD,WAAM,GAAG,CAAC,CAAC;QAET,IAAI,CAAC,cAAc;aAChB,MAAM;aACN,SAAS,CAAC,MAAM,CAAC,EAAE;YAClB,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;IACP,CAAC;IAED,QAAQ;IACR,CAAC;IAED,QAAQ;IACR,CAAC;IAED,OAAO;IACP,CAAC;CACF;;YAhBqC,8DAAc;;AAFvC,uBAAuB;IALnC,+DAAS,CAAC;QACT,QAAQ,EAAE,oBAAoB;QAC9B,kLAA8C;;KAE/C,CAAC;GACW,uBAAuB,CAkBnC;AAlBmC;;;;;;;;;;;;ACRpC,kCAAkC,qCAAqC,sBAAsB,wBAAwB,uBAAuB,GAAG,gBAAgB,iBAAiB,GAAG,qCAAqC,iBAAiB,GAAG,+CAA+C,msB;;;;;;;;;;;;;;;;;;;;ACAzO;AACF;AACmB;AACnB;AAOhD,IAAa,uBAAuB,GAApC,MAAa,uBAAuB;IAQlC,YAAoB,IAAmB,EAAU,OAA0B;QAAvD,SAAI,GAAJ,IAAI,CAAe;QAAU,YAAO,GAAP,OAAO,CAAmB;QAN3E,cAAS,GAAQ,EAAE,CAAC;QACpB,mBAAc,GAAU,EAAE,CAAC;QAC3B,gBAAW,GAAQ;YACjB,MAAM,EAAE,CAAC;YACT,WAAW,EAAE,EAAE;SAChB,CAAC;QAEA,IAAI,CAAC,KAAK,GAAG,IAAI,6DAAK,EAAE,CAAC;IAC3B,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAED,WAAW;QACT,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;QACpB,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,uBAAuB,CAAC;aAC3C,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE;YAClB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;YACpC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;QACtB,CAAC,EACC,CAAC,KAAK,EAAE,EAAE;YACR,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;YACpB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC;IACT,CAAC;IAED,cAAc,CAAC,MAAc;QAC3B,0CAA0C;QAC1C,MAAM,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,IAAI,MAAM,CAAC,CAAC;QACxD,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,EAAE,CAAC,MAAM,CAAC;QACpC,IAAI,CAAC,WAAW,CAAC,WAAW,GAAG,EAAE,CAAC,WAAW,CAAC;QAC9C,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;QACzB,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,IAAI,CAAC;aACtD,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE;YAClB,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;gBACnB,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;oBACf,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC;wBACvB,EAAE,EAAE,CAAC,CAAC,EAAE;wBACR,KAAK,EAAE,CAAC,CAAC,KAAK;wBACd,MAAM,EAAE,KAAK;qBACd,CAAC,CAAC;gBACL,CAAC,CAAC,CAAC;aACJ;iBAAM;gBACL,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC;oBACvB,EAAE,EAAE,CAAC;oBACL,KAAK,EAAE,EAAE;oBACT,MAAM,EAAE,IAAI;iBACb,CAAC,CAAC;aACJ;QACH,CAAC,EACC,CAAC,KAAK,EAAE,EAAE;YACR,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;QACxC,CAAC,CACF,CAAC;IACN,CAAC;IAED,eAAe,CAAC,GAAQ;QACtB,IAAI,GAAG,CAAC,KAAK,IAAI,EAAE,EAAE;YACnB,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;YACpB,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,WAAW,EAAE,GAAG,CAAC,EAAE,EAAE,KAAK,EAAE,GAAG,CAAC,KAAK,EAAE,EAAE,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC;iBACtG,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE;gBAClB,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;gBACpB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,sBAAsB,EAAE,CAAC,CAAC;gBACxD,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;YAC/C,CAAC,EACC,CAAC,KAAK,EAAE,EAAE;gBACR,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;gBACpB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;YACxC,CAAC,CAAC,CAAC;SACR;IACH,CAAC;IAED,SAAS,CAAC,GAAQ;QAChB,IAAI,GAAG,CAAC,KAAK,IAAI,EAAE,EAAE;YACnB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC;gBACvB,EAAE,EAAE,CAAC;gBACL,KAAK,EAAE,EAAE;gBACT,MAAM,EAAE,IAAI;aACb,CAAC,CAAC;SACJ;IACH,CAAC;CAEF;;YA9E2B,gFAAa;YAAmB,6DAAiB;;AARhE,uBAAuB;IALnC,+DAAS,CAAC;QACT,QAAQ,EAAE,oBAAoB;QAC9B,kLAA8C;;KAE/C,CAAC;GACW,uBAAuB,CAsFnC;AAtFmC;;;;;;;;;;;;ACVpC,+DAA+D,2J;;;;;;;;;;;;;;;;;ACAb;AAQlD,IAAa,kBAAkB,GAA/B,MAAa,kBAAkB;IAE7B;QACE,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;IACrE,CAAC;IAED,QAAQ;IACR,CAAC;CAEF;AATY,kBAAkB;IAL9B,+DAAS,CAAC;QACT,QAAQ,EAAE,eAAe;QACzB,mKAAyC;;KAE1C,CAAC;GACW,kBAAkB,CAS9B;AAT8B;;;;;;;;;;;;ACR/B,+DAA+D,+J;;;;;;;;;;;;;;;;;;;;;;;ACAb;AAE2D;AAC7D;AACmB;AACV;AACC;AAGnD,MAAM,mBAAmB;IAAhC;QACE,kBAAa,GAAG,KAAK,CAAC;IAMxB,CAAC;IALC,YAAY,CAAC,OAA2B,EAAE,IAAwC;QAChF,MAAM,WAAW,GAAG,CAAC,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,CAAC;QACnD,MAAM,aAAa,GAAG,CAAC,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,MAAM,CAAC,OAAO,IAAI,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACtG,OAAO,IAAI,CAAC,aAAa,IAAI,CAAC,WAAW,IAAI,aAAa,CAAC,CAAC;IAC9D,CAAC;CACF;AAOD,IAAa,mBAAmB,GAAhC,MAAa,mBAAmB;IAQ9B,YAAoB,IAAmB,EAAU,MAAc,EACnD,cAA8B,EAAU,WAAwB;QADxD,SAAI,GAAJ,IAAI,CAAe;QAAU,WAAM,GAAN,MAAM,CAAQ;QACnD,mBAAc,GAAd,cAAc,CAAgB;QAAU,gBAAW,GAAX,WAAW,CAAa;QAN5E,oBAAe,GAAG,KAAK,CAAC;QAGxB,YAAO,GAAG,IAAI,mBAAmB,EAAE,CAAC;QAIlC,IAAI,CAAC,UAAU,GAAG,IAAI,uEAAU,EAAE,CAAC;QACnC,IAAI,CAAC,KAAK,GAAG,IAAI,6DAAK,EAAE,CAAC;QACzB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YAC1C,EAAE,EAAE,CAAC,CAAC,EAAE,yDAAU,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YAC/B,QAAQ,EAAE,CAAC,CAAC,EAAE,yDAAU,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YACrC,cAAc,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,OAAO,CAAC,CAAC,yDAAU,CAAC,QAAQ,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC;YAC3F,cAAc,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,OAAO,CAAC,CAAC,yDAAU,CAAC,QAAQ,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC;YAC3F,mBAAmB,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YACjD,SAAS,EAAE,CAAC,CAAC,EAAE,yDAAU,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;SACvC,CAAC,CAAC;QACH,IAAI,CAAC,cAAc;aAChB,MAAM;aACN,SAAS,CAAC,MAAM,CAAC,EAAE;YAClB,IAAI,CAAC,UAAU,CAAC,EAAE,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;YAC3E,IAAI,IAAI,CAAC,UAAU,CAAC,EAAE,KAAK,CAAC,EAAE;gBAC5B,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;aAC9B;iBAAM;gBACL,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;aAC7B;QACH,CAAC,CAAC,CAAC;IACP,CAAC;IAED,QAAQ;QACN,IAAI,IAAI,CAAC,UAAU,CAAC,EAAE,KAAK,CAAC,EAAE;YAC5B,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;SACzC;IACH,CAAC;IAED,qBAAqB,CAAC,OAAoB;QACxC,MAAM,YAAY,GAAG,CAAC,OAAO,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,MAAM,KAAK,CAAC,CAAC;QAC/D,MAAM,OAAO,GAAG,CAAC,YAAY,CAAC;QAC9B,OAAO,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC;IAC/C,CAAC;IAED,cAAc,CAAC,EAAU;QACvB,IAAI,EAAE,KAAK,SAAS,IAAI,EAAE,KAAK,CAAC,EAAE;YAChC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,EAAE,CAAC;iBAC5B,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE;gBAClB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;YACzB,CAAC,EACC,CAAC,KAAK,EAAE,EAAE;gBACR,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;YACxC,CAAC,CAAC,CAAC;SACR;IACH,CAAC;IAED,gBAAgB;QACd,IAAI,CAAC,OAAO,CAAC,aAAa,GAAG,IAAI,CAAC;QAClC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE;YAE/B,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC;iBAC1D,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE;gBAClB,IAAI,CAAC,UAAU,CAAC,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;gBACxC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,sBAAsB,EAAE,CAAC,CAAC;gBACxD,UAAU,CAAC,GAAG,EAAE;oBACd,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,mBAAmB,GAAG,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;oBACpE,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,gBAAgB,GAAG,GAAG,EAAE;wBACrD,OAAO,KAAK,CAAC;oBACf,CAAC,CAAC;gBACJ,CAAC,EAAE,GAAG,CAAC,CAAC;YACV,CAAC,EACC,CAAC,KAAK,EAAE,EAAE;gBACR,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;YACxC,CAAC,CAAC,CAAC;SACR;IACH,CAAC;IAED,aAAa;QACX,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,oBAAoB,CAAC,CAAC;QAChD,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,gBAAgB,GAAG,GAAG,EAAE;YACrD,OAAO,KAAK,CAAC;QACf,CAAC,CAAC;IACJ,CAAC;IAED,IAAI;QACF,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,kBAAkB,CAAC,CAAC;IAChD,CAAC;CAEF;;YAhF2B,gFAAa;YAAkB,sDAAM;YACnC,8DAAc;YAAuB,0DAAW;;AATjE,mBAAmB;IAL/B,+DAAS,CAAC;QACT,QAAQ,EAAE,gBAAgB;QAC1B,sKAA0C;;KAE3C,CAAC;GACW,mBAAmB,CAwF/B;AAxF+B;;;;;;;;;;;;ACvBhC,+DAA+D,mJ;;;;;;;;;;;;;;;;;;;;;;;;ACAb;AAE2D;AACxC;AACZ;AAEP;AACF;AACE;AAG3C,MAAM,mBAAmB;IAAhC;QACE,kBAAa,GAAG,KAAK,CAAC;IAMxB,CAAC;IALC,YAAY,CAAC,OAA2B,EAAE,IAAwC;QAChF,MAAM,WAAW,GAAG,CAAC,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,OAAO,IAAI,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC3E,MAAM,aAAa,GAAG,CAAC,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,MAAM,CAAC,OAAO,IAAI,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACvH,OAAO,IAAI,CAAC,aAAa,IAAI,CAAC,WAAW,IAAI,aAAa,CAAC,CAAC;IAC9D,CAAC;CACF;AAOD,IAAa,eAAe,GAA5B,MAAa,eAAe;IAO1B,YAAoB,IAAmB,EAAU,MAAc,EACnD,cAA8B,EAAU,OAA0B,EACpE,WAAwB;QAFd,SAAI,GAAJ,IAAI,CAAe;QAAU,WAAM,GAAN,MAAM,CAAQ;QACnD,mBAAc,GAAd,cAAc,CAAgB;QAAU,YAAO,GAAP,OAAO,CAAmB;QACpE,gBAAW,GAAX,WAAW,CAAa;QAPlC,gBAAW,GAAG,KAAK,CAAC;QAGpB,YAAO,GAAG,IAAI,mBAAmB,EAAE,CAAC;QACpC,kBAAa,GAAW,EAAE,CAAC;QAIzB,IAAI,CAAC,MAAM,GAAG,IAAI,+DAAM,EAAE,CAAC;QAC3B,IAAI,CAAC,KAAK,GAAG,IAAI,0DAAK,EAAE,CAAC;QACzB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CACrC;YACE,EAAE,EAAE,CAAC,CAAC,EAAE,yDAAU,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YAC/B,UAAU,EAAE,CAAC,EAAE,KAAK,EAAE,qBAAqB,EAAE,QAAQ,EAAE,IAAI,EAAE,EAAE,yDAAU,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YACtF,WAAW,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,OAAO,CAAC,CAAC,yDAAU,CAAC,QAAQ,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC;YACxF,cAAc,EAAE,CAAC,CAAC,EAAE,yDAAU,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YAC3C,YAAY,EAAE,CAAC,CAAC,EAAE,yDAAU,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YACzC,eAAe,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YAC7C,WAAW,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,OAAO,CAAC,CAAC,yDAAU,CAAC,QAAQ,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC;YACxF,SAAS,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,OAAO,CAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC1D,MAAM,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,OAAO,CAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;YACvD,aAAa,EAAE,CAAC,CAAC,EAAE,yDAAU,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YAC1C,QAAQ,EAAE,CAAC,CAAC,EAAE,yDAAU,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YACrC,OAAO,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YACrC,iBAAiB,EAAE,CAAC,IAAI,IAAI,EAAE,EAAE,yDAAU,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;SACxD,CACF,CAAC;QACF,IAAI,CAAC,cAAc;aAChB,MAAM;aACN,SAAS,CAAC,MAAM,CAAC,EAAE;YAClB,IAAI,CAAC,MAAM,CAAC,EAAE,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YACjE,IAAI,IAAI,CAAC,MAAM,CAAC,EAAE,KAAK,CAAC,EAAE;gBACxB,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;gBACzB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;aACjC;iBAAM;gBACL,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;aACzB;QACH,CAAC,CAAC,CAAC;IACP,CAAC;IAED,QAAQ;IACR,CAAC;IAED,qBAAqB,CAAC,OAAoB;QACxC,MAAM,YAAY,GAAG,CAAC,OAAO,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,MAAM,KAAK,CAAC,CAAC;QAC/D,MAAM,OAAO,GAAG,CAAC,YAAY,CAAC;QAC9B,OAAO,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC;IAC/C,CAAC;IAED,UAAU,CAAC,EAAU;QACnB,IAAI,EAAE,KAAK,SAAS,IAAI,EAAE,KAAK,CAAC,EAAE;YAChC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;YACpB,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,EAAE,CAAC;iBAC5B,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE;gBAClB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;gBACnB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC;gBAC/C,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;YACtB,CAAC,EACC,CAAC,KAAK,EAAE,EAAE;gBACR,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;gBACpB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;YACxC,CAAC,CAAC,CAAC;SACR;IACH,CAAC;IAED,YAAY;QACV,IAAI,CAAC,OAAO,CAAC,aAAa,GAAG,IAAI,CAAC;QAClC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE;YAC3B,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;YACpB,IAAI,CAAC,MAAM,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;YAC/C,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC;iBAClD,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE;gBAClB,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;gBACpB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,sBAAsB,EAAE,CAAC,CAAC;gBACxD,UAAU,CAAC,GAAG,EAAE;oBACd,8CAA8C;oBAC9C,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,eAAe,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;oBACxD,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,gBAAgB,GAAG,GAAG,EAAE;wBACrD,OAAO,KAAK,CAAC;oBACf,CAAC,CAAC;gBACJ,CAAC,EAAE,CAAC,CAAC,CAAC;YACR,CAAC,EACC,CAAC,KAAK,EAAE,EAAE;gBACR,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;gBACpB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;YACxC,CAAC,CAAC,CAAC;SACR;IACH,CAAC;IAED,SAAS;QACP,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,gBAAgB,CAAC,CAAC;QAC5C,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,gBAAgB,GAAG,GAAG,EAAE;YACrD,OAAO,KAAK,CAAC;QACf,CAAC,CAAC;IACJ,CAAC;IAED,IAAI;QACF,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;IAC5C,CAAC;CACF;;YA9F2B,6EAAa;YAAkB,sDAAM;YACnC,8DAAc;YAAmB,6DAAiB;YACvD,0DAAW;;AATvB,eAAe;IAL3B,+DAAS,CAAC;QACT,QAAQ,EAAE,YAAY;QACtB,0JAAsC;;KAEvC,CAAC;GACW,eAAe,CAqG3B;AArG2B;;;;;;;;;;;;ACzB5B,+DAA+D,+J;;;;;;;;;;;;;;;;;;;;;;ACAF;AACJ;AACkB;AACR;AACnB;AACA;AAOhD,IAAa,mBAAmB,GAAhC,MAAa,mBAAmB;IAmB9B,YAAoB,aAA4B,EAAU,cAA8B,EAC9E,OAA0B,EAAU,MAAc;QADxC,kBAAa,GAAb,aAAa,CAAe;QAAU,mBAAc,GAAd,cAAc,CAAgB;QAC9E,YAAO,GAAP,OAAO,CAAmB;QAAU,WAAM,GAAN,MAAM,CAAQ;QAjB5D,YAAO,GAAQ,EAAE,CAAC;QAIlB,gBAAW,GAAG,CAAC,CAAC;QAChB,aAAQ,GAAG,EAAE,CAAC;QAEd,cAAS,GAAG,CAAC,CAAC;QACd,iBAAY,GAAG,CAAC,CAAC;QACjB,YAAO,GAAG,IAAI,IAAI,EAAE,CAAC;QACrB,WAAM,GAAG,IAAI,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC,OAAO,CAAC,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;QAChE,WAAM,GAAG,MAAM,CAAC;QAOd,IAAI,CAAC,IAAI,GAAG,IAAI,6DAAK,EAAE,CAAC;IAC1B,CAAC;IAED,SAAS;QACP,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,gBAAgB,CAAC,CAAC;QAC5C,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,gBAAgB,GAAG,GAAG,EAAE;YACrD,OAAO,KAAK,CAAC;QACf,CAAC,CAAC;IACJ,CAAC;IAED,iBAAiB,CAAC,IAAY,EAAE,MAAc,EAAE,EAAU;QACxD,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,MAAM,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC;IAClE,CAAC;IAED,gBAAgB,CAAC,IAAY,EAAE,MAAc;QAC3C,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC;QAC/D,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,gBAAgB,GAAG,GAAG,EAAE;YACrD,OAAO,KAAK,CAAC;QACf,CAAC,CAAC;IACJ,CAAC;IACD,QAAQ;QACN,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAED,WAAW;QACT,IAAI,CAAC,cAAc;aAChB,MAAM;aACN,SAAS,CAAC,MAAM,CAAC,EAAE;YAClB,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;YACpB,MAAM,GAAG,GAAG,WAAW,GAAG,IAAI,CAAC,QAAQ,GAAG,GAAG,GAAG,IAAI,CAAC,MAAM,GAAG,GAAG,GAAG,IAAI,CAAC,YAAY,GAAG,GAAG;kBACvF,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,GAAG,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC;YACnE,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,GAAG,CAAC;iBAChC,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE;gBAClB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;gBACpB,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;YACtB,CAAC,EACC,CAAC,KAAK,EAAE,EAAE;gBACR,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;gBACpB,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;YACvC,CAAC,CACF,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAED,QAAQ,CAAC,IAAS;QAChB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;YACjC,IAAI,CAAC,CAAC,YAAY,GAAG,CAAC,CAAC,YAAY,EAAE;gBAAE,OAAO,CAAC,CAAC,CAAC;aAAE;YACnD,IAAI,CAAC,CAAC,YAAY,GAAG,CAAC,CAAC,YAAY,EAAE;gBAAE,OAAO,CAAC,CAAC;aAAE;YAClD,OAAO,CAAC,CAAC;QACX,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;QAC/C,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC;QAC7B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;QACrC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;IACtC,CAAC;IAED,QAAQ,CAAC,IAAU;QACjB,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;QAC1C,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,SAAS,KAAK,EAAE,EAAE;YACzC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;YACvB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YACpC,OAAO;SACR;QAED,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;YACnC,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,KAAK,KAAK,CAAC;YACvC,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,KAAK,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;IACtC,CAAC;IAED,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK;QACjB,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC7C,CAAC;IACM,UAAU,CAAC,CAAM;QACtB,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC,SAAS,CAAC;QAC/B,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,QAAQ,CAAC;QAC3B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC5B,CAAC;IAEO,OAAO,CAAC,QAAa,EAAE,MAAe;QAC5C,IAAI,CAAC,UAAU,GAAG,IAAI,oEAAkB,CAAU,QAAQ,CAAC,CAAC;QAC5D,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;QAC3C,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;QACnC,IAAI,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAClD,CAAC;IAEO,QAAQ,CAAC,GAAQ;QACvB,MAAM,GAAG,GAAG,CAAC,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC;QACnD,MAAM,KAAK,GAAG,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC/C,MAAM,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QACnC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;IACzB,CAAC;IAED,WAAW,CAAC,WAAmB;QAC7B,IAAI,CAAC,MAAM,GAAG,WAAW,CAAC;QAC1B,IAAI,CAAC,UAAU,GAAG,IAAI,oEAAkB,CAAU,IAAI,CAAC,KAAK,CAAC,CAAC;QAC9D,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,WAAW,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC1D,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;QAC3C,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE;YAC7B,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC;SACvC;QACD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;IACnD,CAAC;CACF;;YA/GoC,gFAAa;YAA0B,8DAAc;YACrE,6DAAiB;YAAkB,sDAAM;;AAHhB;IAA3C,+DAAS,CAAC,8DAAY,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC;sDAAyB;AAjBzD,mBAAmB;IAL/B,+DAAS,CAAC;QACT,QAAQ,EAAE,gBAAgB;QAC1B,sKAA0C;;KAE3C,CAAC;GACW,mBAAmB,CAkI/B;AAlI+B;;;;;;;;;;;;ACZhC,+DAA+D,2J;;;;;;;;;;;;;;;;;;;;;;;ACAiE;AACnF;AACC;AAEG;AACwB;AACN;AACnB;AAEhD,MAAM,mBAAmB,GAAG;IAC1B,OAAO,EAAE,gEAAiB;IAC1B,kDAAkD;IAClD,WAAW,EAAE,gEAAU,CAAC,GAAG,EAAE,CAAC,kBAAkB,CAAC;IACjD,KAAK,EAAE,IAAI;CACZ,CAAC;AAYF,IAAa,kBAAkB,0BAA/B,MAAa,kBAAkB;IAkC7B,YAAoB,IAAmB;QAAnB,SAAI,GAAJ,IAAI,CAAe;QAjCvC,sHAAsH;QAC/G,qBAAgB,GAAgB,IAAI,0DAAW,EAAE,CAAC;QAClD,sBAAiB,GAAgB,IAAI,0DAAW,EAAE,CAAC;QACnD,oBAAe,GAAyB,IAAI,kDAAa,CAAQ,CAAC,CAAC,CAAC;QAQ3E,WAAM,GAAQ,CAAC,CAAC;QAGhB,iBAAY,GAAG,KAAK,CAAC;QASrB,kBAAa,GAAG,KAAK,CAAC;QAGtB,yBAAoB,GAAsB,IAAI,0DAAY,EAAO,CAAC;QAIxD,cAAS,GAAG,IAAI,4CAAO,EAAQ,CAAC;QAIxC,IAAI,CAAC,KAAK,GAAG,IAAI,6DAAK,EAAE,CAAC;IAC3B,CAAC;IAED,QAAQ;QACN,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;YACnB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;SACpD;aAAM;YACL,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;YAC/F,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC;SACjD;QAED,IAAI,CAAC,iBAAiB,CAAC,YAAY;aAChC,IAAI,CAAC,gEAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;aAC/B,SAAS,CAAC,GAAG,EAAE;YACd,IAAI,CAAC,WAAW,EAAE,CAAC;QACrB,CAAC,CAAC,CAAC;IACP,CAAC;IAED,eAAe;QACb,0BAA0B;IAC5B,CAAC;IAED,aAAa,CAAC,MAAc,EAAE,YAAqB;QACjD,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,YAAY,CAAC;aAC7C,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE;YAClB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;YACpB,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;YAC/F,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC;QAClD,CAAC,EACC,CAAC,KAAK,EAAE,EAAE;YACR,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;QACxC,CAAC,CACF,CAAC;IACN,CAAC;IAED,WAAW;QACT,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;QACtB,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC;IAC5B,CAAC;IAES,eAAe;QACvB,IAAI,CAAC,eAAe;aACjB,IAAI,CAAC,2DAAI,CAAC,CAAC,CAAC,EAAE,gEAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;aACxC,SAAS,CAAC,GAAG,EAAE;YACd,IAAI,CAAC,QAAQ,CAAC,WAAW,GAAG,CAAC,CAAM,EAAE,CAAM,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC;QAC1E,CAAC,CAAC,CAAC;IACP,CAAC;IAES,WAAW;QACnB,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACjB,OAAO;SACR;QACD,IAAI,MAAM,GAAG,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC;QAC1C,IAAI,CAAC,MAAM,EAAE;YACX,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC;YAChD,OAAO;SACR;aAAM;YACL,MAAM,GAAG,MAAM,CAAC,WAAW,EAAE,CAAC;SAC/B;QACD,IAAI,CAAC,eAAe,CAAC,IAAI,CACvB,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAC/E,CAAC;IACJ,CAAC;IAED,cAAc;QACZ,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;IAC9D,CAAC;IAGD,IAAI,KAAK,KAAU,OAAO,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC;IAExD,IAAI,KAAK,CAAC,CAAM;QACd,IAAI,CAAC,KAAK,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE;YACrC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;SACnC;IACH,CAAC;IAED,UAAU,CAAC,GAAQ;QACjB,IAAI,GAAG,EAAE;YACP,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;SACrC;IACH,CAAC;IAED,gBAAgB,CAAC,EAAO;IACxB,CAAC;IACD,iBAAiB,CAAC,EAAO;IACzB,CAAC;IACD,gBAAgB,CAAE,UAAmB;IAErC,CAAC;CAEF;;YA5F2B,gFAAa;;AAzBvC;IADC,2DAAK,EAAE;mDACO;AAGf;IADC,2DAAK,EAAE;kDACQ;AAGhB;IADC,2DAAK,EAAE;wDACa;AAGrB;IADC,2DAAK,EAAE;uDACY;AAGpB;IADC,2DAAK,EAAE;qDACO;AAGf;IADC,2DAAK,EAAE;yDACc;AAGtB;IADC,4DAAM,EAAE;gEACyD;AAExB;IAAzC,+DAAS,CAAC,UAAU,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC;oDAAqB;AA7BnD,kBAAkB;IAV9B,+DAAS,CAAC;QACT,QAAQ,EAAE,eAAe;QACzB,mKAAyC;QAEzC,SAAS,EAAE,CAAC;gBACV,OAAO,EAAE,gEAAiB;gBAC1B,WAAW,EAAE,gEAAU,CAAC,GAAG,EAAE,CAAC,oBAAkB,CAAC;gBACjD,KAAK,EAAE,IAAI;aACZ,CAAC;;KACH,CAAC;GACW,kBAAkB,CA8H9B;AA9H8B;;;;;;;;;;;;AC1B/B,+DAA+D,mK;;;;;;;;;;;;;;;;;;;;;;;;ACAE;AACjB;AACqB;AACZ;AAEP;AACF;AAC6D;AAItG,MAAM,mBAAmB;IAAhC;QACE,kBAAa,GAAG,KAAK,CAAC;IAMxB,CAAC;IALC,YAAY,CAAC,OAA2B,EAAE,IAAwC;QAChF,MAAM,WAAW,GAAG,CAAC,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,OAAO,IAAI,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC3E,MAAM,aAAa,GAAG,CAAC,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,MAAM,CAAC,OAAO,IAAI,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACvH,OAAO,IAAI,CAAC,aAAa,IAAI,CAAC,WAAW,IAAI,aAAa,CAAC,CAAC;IAC9D,CAAC;CACF;AAOD,IAAa,oBAAoB,GAAjC,MAAa,oBAAoB;IAa/B,YAAoB,IAAmB,EAAU,MAAc,EACnD,cAA8B,EAAU,OAA0B,EACpE,WAAwB;QAFd,SAAI,GAAJ,IAAI,CAAe;QAAU,WAAM,GAAN,MAAM,CAAQ;QACnD,mBAAc,GAAd,cAAc,CAAgB;QAAU,YAAO,GAAP,OAAO,CAAmB;QACpE,gBAAW,GAAX,WAAW,CAAa;QAblC,cAAS,GAAG,KAAK,CAAC;QAGlB,YAAO,GAAG,IAAI,mBAAmB,EAAE,CAAC;QACpC,gBAAW,GAAW,EAAE,CAAC;QAEzB,WAAM,GAAU,CAAC,EAAE,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE;YAC5C,EAAE,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE;YAC7B,EAAE,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE;YAC3B,EAAE,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;QAK/B,IAAI,CAAC,IAAI,GAAG,IAAI,wDAAI,EAAE,CAAC;QACvB,IAAI,CAAC,KAAK,GAAG,IAAI,0DAAK,EAAE,CAAC;QACzB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAC1C;YACE,KAAK,EAAE,CAAC,KAAK,CAAC;YACd,QAAQ,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,OAAO,CAAC,CAAC,yDAAU,CAAC,QAAQ,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC;YACrF,KAAK,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,OAAO,CAAC,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,KAAK,CAAC,CAAC,CAAC;YACxE,WAAW,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,OAAO,CAAC,CAAC,yDAAU,CAAC,QAAQ,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC;YACxF,QAAQ,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,OAAO,CAAC,CAAC,yDAAU,CAAC,QAAQ,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC;YACrF,SAAS,EAAE,CAAC,CAAC,CAAC;YACd,MAAM,EAAE,CAAC,EAAE,CAAC;YACZ,QAAQ,EAAE,CAAC,EAAE,CAAC;YACd,eAAe,EAAE,CAAC,EAAE,CAAC;YACrB,YAAY,EAAE,CAAC,CAAC,CAAC;SAClB,EACD;YACE,SAAS,EAAE,IAAI,CAAC,cAAc;SAC/B,CACF,CAAC;QACF,IAAI,CAAC,cAAc;aAChB,MAAM;aACN,SAAS,CAAC,MAAM,CAAC,EAAE;YAClB,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YAC/D,IAAI,IAAI,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC,EAAE;gBACtB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;gBACvB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;aAC7B;iBAAM;gBACL,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;aACvB;QACH,CAAC,CAAC,CAAC;IACP,CAAC;IAED,QAAQ;IACR,CAAC;IAED,cAAc,CAAC,KAAgB;QAC7B,MAAM,IAAI,GAAG,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC;QAC3C,MAAM,WAAW,GAAG,KAAK,CAAC,QAAQ,CAAC,eAAe,CAAC,KAAK,CAAC;QACzD,KAAK,CAAC,QAAQ,CAAC,eAAe,CAAC,SAAS,CAAC,IAAI,KAAK,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;QAC1F,OAAO,IAAI,KAAK,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;IACzD,CAAC;IAED,qBAAqB,CAAC,OAAoB;QACxC,MAAM,YAAY,GAAG,CAAC,OAAO,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,MAAM,KAAK,CAAC,CAAC;QAC/D,MAAM,OAAO,GAAG,CAAC,YAAY,CAAC;QAC9B,OAAO,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC;IAC/C,CAAC;IAED,eAAe;IAEf,CAAC;IAED,QAAQ,CAAC,EAAU;QACjB,IAAI,EAAE,IAAI,SAAS,IAAI,EAAE,IAAI,CAAC,EAAE;YAC9B,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;YACpB,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,EAAE,CAAC;iBAC5B,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE;gBAClB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;gBACjB,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;YACtB,CAAC,EACC,CAAC,KAAK,EAAE,EAAE;gBACR,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;gBACpB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;YACxC,CAAC,CAAC,CAAC;SACR;IACH,CAAC;IAED,UAAU;QACR,IAAI,CAAC,OAAO,CAAC,aAAa,GAAG,IAAI,CAAC;QAClC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE;YAChC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;YACpB,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;iBAC9C,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE;gBAClB,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;gBACpB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,sBAAsB,EAAE,CAAC,CAAC;gBACxD,UAAU,CAAC,GAAG,EAAE;oBACd,8CAA8C;oBAC9C,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;oBACtD,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,gBAAgB,GAAG,GAAG,EAAE;wBACrD,OAAO,KAAK,CAAC;oBACf,CAAC,CAAC;gBACJ,CAAC,EAAE,CAAC,CAAC,CAAC;YACR,CAAC,EACC,CAAC,KAAK,EAAE,EAAE;gBACR,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;gBACpB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;YACxC,CAAC,CAAC,CAAC;SACR;IACH,CAAC;IAED,OAAO;QACL,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;QAC1C,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,gBAAgB,GAAG,GAAG,EAAE;YACrD,OAAO,KAAK,CAAC;QACf,CAAC,CAAC;IACJ,CAAC;IAED,IAAI;QACF,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;IAC1C,CAAC;CACF;;YAvG2B,6EAAa;YAAkB,sDAAM;YACnC,8DAAc;YAAmB,6DAAiB;YACvD,0DAAW;;AAfvB,oBAAoB;IALhC,+DAAS,CAAC;QACT,QAAQ,EAAE,iBAAiB;QAC3B,yKAA2C;;KAE5C,CAAC;GACW,oBAAoB,CAoHhC;AApHgC;;;;;;;;;;;;ACzBjC,+BAA+B,wBAAwB,iBAAiB,oBAAoB,8BAA8B,uBAAuB,GAAG,+BAA+B,iBAAiB,0BAA0B,mBAAmB,sBAAsB,gCAAgC,yBAAyB,uBAAuB,KAAK,GAAG,mBAAmB,wBAAwB,8BAA8B,GAAG,yBAAyB,mBAAmB,gBAAgB,mBAAmB,sBAAsB,GAAG,4BAA4B,mBAAmB,GAAG,yCAAyC,qBAAqB,cAAc,GAAG,+CAA+C,29C;;;;;;;;;;;;;;;;;;;;;;;;ACAplB;AAC1C;AACZ;AACkB;AACzB;AACF;AACH;AAO7C,IAAa,aAAa,GAA1B,MAAa,aAAa;IA+BxB,YAAoB,aAA4B,EAAU,cAA8B,EAC9E,OAA0B,EAAU,MAAc;QADxC,kBAAa,GAAb,aAAa,CAAe;QAAU,mBAAc,GAAd,cAAc,CAAgB;QAC9E,YAAO,GAAP,OAAO,CAAmB;QAAU,WAAM,GAAN,MAAM,CAAQ;QA9B5D,YAAO,GAAQ,EAAE,CAAC;QAIlB,gBAAW,GAAG,CAAC,CAAC;QAChB,aAAQ,GAAG,EAAE,CAAC;QAEd,cAAS,GAAG,CAAC,CAAC;QAKd,eAAU,GAAG,IAAI,CAAC;QASlB,kBAAa,GAAG,KAAK,CAAC;QAGtB,sBAAiB,GAAyB,IAAI,0DAAY,EAAU,CAAC;QAGrE,qBAAgB,GAAyB,IAAI,0DAAY,EAAU,CAAC;QAIlE,IAAI,CAAC,MAAM,GAAG,IAAI,0DAAK,EAAE,CAAC;IAC5B,CAAC;IAED,iBAAiB,CAAC,IAAY,EAAE,MAAc,EAAE,EAAU;QACxD,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,MAAM,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC;IAClE,CAAC;IAED,mBAAmB,CAAC,EAAU;QAC5B,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAClC,CAAC;IAED,gBAAgB,CAAC,IAAY,EAAE,MAAc;QAC3C,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC;QAC/D,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,gBAAgB,GAAG,GAAG,EAAE;YACrD,OAAO,KAAK,CAAC;QACf,CAAC,CAAC;IACJ,CAAC;IAED,kBAAkB;QAChB,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAChC,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAED,WAAW;QACT,IAAI,CAAC,cAAc;aAChB,MAAM;aACN,SAAS,CAAC,MAAM,CAAC,EAAE;YAClB,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;YACpB,IAAI,KAAK,GAAW,MAAM,CAAC,MAAM,CAAC;YAClC,KAAK,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC;YAChD,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC;iBAC9F,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE;gBAClB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;gBACpB,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;oBACjC,IAAI,CAAC,CAAC,YAAY,GAAG,CAAC,CAAC,YAAY,EAAE;wBAAE,OAAO,CAAC,CAAC,CAAC;qBAAE;oBACnD,IAAI,CAAC,CAAC,YAAY,GAAG,CAAC,CAAC,YAAY,EAAE;wBAAE,OAAO,CAAC,CAAC;qBAAE;oBAClD,OAAO,CAAC,CAAC;gBACX,CAAC,CAAC,CAAC;gBACH,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;gBAC/C,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC;gBAC7B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;gBACrC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;gBACpC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;YACtB,CAAC,EACC,CAAC,KAAK,EAAE,EAAE;gBACR,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;gBACpB,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;YACzC,CAAC,CACF,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC;IAED,QAAQ,CAAC,IAAU;QACjB,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;QAC1C,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,SAAS,KAAK,EAAE,EAAE;YACzC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;YACvB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YACpC,OAAO;SACR;QAED,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;YACnC,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,KAAK,KAAK,CAAC;YACvC,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,KAAK,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;IACtC,CAAC;IAED,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK;QACjB,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC7C,CAAC;IACM,UAAU,CAAC,CAAM;QACtB,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC,SAAS,CAAC;QAC/B,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,QAAQ,CAAC;QAC3B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC5B,CAAC;IAEO,OAAO,CAAC,QAAa,EAAE,MAAe;QAC5C,IAAI,CAAC,UAAU,GAAG,IAAI,oEAAkB,CAAU,QAAQ,CAAC,CAAC;QAC5D,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;QAC3C,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;QACnC,IAAI,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAClD,CAAC;IAEO,QAAQ,CAAC,GAAQ;QACvB,MAAM,GAAG,GAAG,CAAC,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC;QACnD,MAAM,KAAK,GAAG,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC/C,MAAM,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QACnC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;IACzB,CAAC;IAED,WAAW,CAAC,WAAmB;QAC7B,IAAI,CAAC,UAAU,GAAG,IAAI,oEAAkB,CAAU,IAAI,CAAC,KAAK,CAAC,CAAC;QAC9D,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,WAAW,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC1D,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;QAC3C,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE;YAC7B,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC;SACvC;QACD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;IACnD,CAAC;CACF;;YAxGoC,6EAAa;YAA0B,8DAAc;YACrE,6DAAiB;YAAkB,sDAAM;;AArBhB;IAA3C,+DAAS,CAAC,8DAAY,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC;gDAAyB;AAGpE;IADC,2DAAK,EAAE;iDACU;AAGlB;IADC,2DAAK,EAAE;6CACO;AAGf;IADC,2DAAK,EAAE;+CACS;AAGjB;IADC,2DAAK,EAAE;oDACc;AAGtB;IADC,4DAAM,EAAE;wDAC4D;AAGrE;IADC,4DAAM,EAAE;uDAC2D;AA7BzD,aAAa;IALzB,+DAAS,CAAC;QACT,QAAQ,EAAE,UAAU;QACpB,oJAAoC;;KAErC,CAAC;GACW,aAAa,CAuIzB;AAvIyB;AA0I1B,IAAa,WAAW,GAAxB,MAAa,WAAW;IACtB,SAAS,CAAC,KAAU,EAAE,UAAkB;QACtC,IAAI,KAAK,EAAE;YACT,MAAM,MAAM,GAAU,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACzC,MAAM,OAAO,GAAG,EAAE,CAAC;YACnB,MAAM,CAAC,OAAO,CAAC,CAAC,GAAQ,EAAE,EAAE;gBAC1B,IAAI,UAAU,KAAK,GAAG,EAAE;oBACtB,MAAM,EAAE,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,kEAAU,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;oBAC9G,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;iBAClB;YACH,CAAC,CAAC,CAAC;YACH,OAAO,OAAO,CAAC;SAChB;IACH,CAAC;CACF;AAdY,WAAW;IADvB,0DAAI,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC;GACb,WAAW,CAcvB;AAduB","file":"layouts-admin-layout-admin-layout-module-es2015.js","sourcesContent":["import { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { A, Z, ZERO, NINE, SPACE, END, HOME } from '@angular/cdk/keycodes';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { Subject } from 'rxjs';\nimport { delay, take, takeUntil } from 'rxjs/operators';\nimport { Directive, ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, Inject, Input, ViewChild, ContentChild, Optional, HostBinding, Output, NgModule } from '@angular/core';\nimport { MatOption, MatSelect, SELECT_PANEL_MAX_HEIGHT, _countGroupLabelsBeforeOption, MatButtonModule, MatInputModule, MatIconModule, MatProgressSpinnerModule, MatCheckboxModule } from '@angular/material';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Directive for providing a custom clear-icon.\n * e.g.\n * <ngx-mat-select-search [formControl]=\"bankFilterCtrl\">\n *   <mat-icon ngxMatSelectSearchClear>delete</mat-icon>\n * </ngx-mat-select-search>\n */\nclass MatSelectSearchClearDirective {\n}\nMatSelectSearchClearDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[ngxMatSelectSearchClear]'\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/* tslint:disable:member-ordering component-selector */\n/**\n * Component providing an input field for searching MatSelect options.\n *\n * Example usage:\n *\n * interface Bank {\n *  id: string;\n *  name: string;\n * }\n *\n * \\@Component({\n *   selector: 'my-app-data-selection',\n *   template: `\n *     <mat-form-field>\n *       <mat-select [formControl]=\"bankCtrl\" placeholder=\"Bank\">\n *         <ngx-mat-select-search [formControl]=\"bankFilterCtrl\"></ngx-mat-select-search>\n *         <mat-option *ngFor=\"let bank of filteredBanks | async\" [value]=\"bank.id\">\n *           {{bank.name}}\n *         </mat-option>\n *       </mat-select>\n *     </mat-form-field>\n *   `\n * })\n * export class DataSelectionComponent implements OnInit, OnDestroy {\n *\n *   // control for the selected bank\n *   public bankCtrl: FormControl = new FormControl();\n *   // control for the MatSelect filter keyword\n *   public bankFilterCtrl: FormControl = new FormControl();\n *\n *   // list of banks\n *   private banks: Bank[] = [{name: 'Bank A', id: 'A'}, {name: 'Bank B', id: 'B'}, {name: 'Bank C', id: 'C'}];\n *   // list of banks filtered by search keyword\n *   public filteredBanks: ReplaySubject<Bank[]> = new ReplaySubject<Bank[]>(1);\n *\n *   // Subject that emits when the component has been destroyed.\n *   private _onDestroy = new Subject<void>();\n *\n *\n *   ngOnInit() {\n *     // load the initial bank list\n *     this.filteredBanks.next(this.banks.slice());\n *     // listen for search field value changes\n *     this.bankFilterCtrl.valueChanges\n *       .pipe(takeUntil(this._onDestroy))\n *       .subscribe(() => {\n *         this.filterBanks();\n *       });\n *   }\n *\n *   ngOnDestroy() {\n *     this._onDestroy.next();\n *     this._onDestroy.complete();\n *   }\n *\n *   private filterBanks() {\n *     if (!this.banks) {\n *       return;\n *     }\n *\n *     // get the search keyword\n *     let search = this.bankFilterCtrl.value;\n *     if (!search) {\n *       this.filteredBanks.next(this.banks.slice());\n *       return;\n *     } else {\n *       search = search.toLowerCase();\n *     }\n *\n *     // filter the banks\n *     this.filteredBanks.next(\n *       this.banks.filter(bank => bank.name.toLowerCase().indexOf(search) > -1)\n *     );\n *   }\n * }\n */\nclass MatSelectSearchComponent {\n    /**\n     * @param {?} matSelect\n     * @param {?} changeDetectorRef\n     * @param {?} _viewportRuler\n     * @param {?=} matOption\n     */\n    constructor(matSelect, changeDetectorRef, _viewportRuler, matOption = null) {\n        this.matSelect = matSelect;\n        this.changeDetectorRef = changeDetectorRef;\n        this._viewportRuler = _viewportRuler;\n        this.matOption = matOption;\n        /**\n         * Label of the search placeholder\n         */\n        this.placeholderLabel = 'Suche';\n        /**\n         * Type of the search input field\n         */\n        this.type = 'text';\n        /**\n         * Label to be shown when no entries are found. Set to null if no message should be shown.\n         */\n        this.noEntriesFoundLabel = 'Keine Optionen gefunden';\n        /**\n         * Whether or not the search field should be cleared after the dropdown menu is closed.\n         * Useful for server-side filtering. See [#3](https://github.com/bithost-gmbh/ngx-mat-select-search/issues/3)\n         */\n        this.clearSearchInput = true;\n        /**\n         * Whether to show the search-in-progress indicator\n         */\n        this.searching = false;\n        /**\n         * Disables initial focusing of the input field\n         */\n        this.disableInitialFocus = false;\n        /**\n         * Prevents home / end key being propagated to mat-select,\n         * allowing to move the cursor within the search input instead of navigating the options\n         */\n        this.preventHomeEndKeyPropagation = false;\n        /**\n         * Disables scrolling to active options when option list changes. Useful for server-side search\n         */\n        this.disableScrollToActiveOnOptionsChanged = false;\n        /**\n         * Adds 508 screen reader support for search box\n         */\n        this.ariaLabel = 'dropdown search';\n        /**\n         * Whether to show Select All Checkbox (for mat-select[multi=true])\n         */\n        this.showToggleAllCheckbox = false;\n        /**\n         * select all checkbox checked state\n         */\n        this.toggleAllCheckboxChecked = false;\n        /**\n         * select all checkbox indeterminate state\n         */\n        this.toggleAllCheckboxIndeterminate = false;\n        /**\n         * Output emitter to send to parent component with the toggle all boolean\n         */\n        this.toggleAll = new EventEmitter();\n        this.onChange = (_) => { };\n        this.onTouched = (_) => { };\n        /**\n         * Whether the backdrop class has been set\n         */\n        this.overlayClassSet = false;\n        /**\n         * Event that emits when the current value changes\n         */\n        this.change = new EventEmitter();\n        /**\n         * Subject that emits when the component has been destroyed.\n         */\n        this._onDestroy = new Subject();\n    }\n    /**\n     * @return {?}\n     */\n    get isInsideMatOption() {\n        return !!this.matOption;\n    }\n    /**\n     * Current search value\n     * @return {?}\n     */\n    get value() {\n        return this._value;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        // set custom panel class\n        /** @type {?} */\n        const panelClass = 'mat-select-search-panel';\n        if (this.matSelect.panelClass) {\n            if (Array.isArray(this.matSelect.panelClass)) {\n                ((/** @type {?} */ (this.matSelect.panelClass))).push(panelClass);\n            }\n            else if (typeof this.matSelect.panelClass === 'string') {\n                this.matSelect.panelClass = [this.matSelect.panelClass, panelClass];\n            }\n            else if (typeof this.matSelect.panelClass === 'object') {\n                this.matSelect.panelClass[panelClass] = true;\n            }\n        }\n        else {\n            this.matSelect.panelClass = panelClass;\n        }\n        // set custom mat-option class if the component was placed inside a mat-option\n        if (this.matOption) {\n            this.matOption.disabled = true;\n            this.matOption._getHostElement().classList.add('contains-mat-select-search');\n        }\n        // when the select dropdown panel is opened or closed\n        this.matSelect.openedChange\n            .pipe(delay(1), takeUntil(this._onDestroy))\n            .subscribe((opened) => {\n            if (opened) {\n                this.updateInputWidth();\n                // focus the search field when opening\n                if (!this.disableInitialFocus) {\n                    this._focus();\n                }\n            }\n            else {\n                // clear it when closing\n                if (this.clearSearchInput) {\n                    this._reset();\n                }\n            }\n        });\n        // set the first item active after the options changed\n        this.matSelect.openedChange\n            .pipe(take(1))\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(() => {\n            if (this.matSelect._keyManager) {\n                this.matSelect._keyManager.change.pipe(takeUntil(this._onDestroy))\n                    .subscribe(() => this.adjustScrollTopToFitActiveOptionIntoView());\n            }\n            else {\n                console.log('_keyManager was not initialized.');\n            }\n            this._options = this.matSelect.options;\n            this._options.changes\n                .pipe(takeUntil(this._onDestroy))\n                .subscribe(() => {\n                /** @type {?} */\n                const keyManager = this.matSelect._keyManager;\n                if (keyManager && this.matSelect.panelOpen) {\n                    // avoid \"expression has been changed\" error\n                    setTimeout(() => {\n                        // set first item active and input width\n                        keyManager.setFirstItemActive();\n                        this.updateInputWidth();\n                        // set no entries found class on mat option\n                        if (this.matOption) {\n                            if (this._noEntriesFound()) {\n                                this.matOption._getHostElement().classList.add('mat-select-search-no-entries-found');\n                            }\n                            else {\n                                this.matOption._getHostElement().classList.remove('mat-select-search-no-entries-found');\n                            }\n                        }\n                        if (!this.disableScrollToActiveOnOptionsChanged) {\n                            this.adjustScrollTopToFitActiveOptionIntoView();\n                        }\n                    }, 1);\n                }\n            });\n        });\n        // detect changes when the input changes\n        this.change\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(() => {\n            this.changeDetectorRef.detectChanges();\n        });\n        // resize the input width when the viewport is resized, i.e. the trigger width could potentially be resized\n        this._viewportRuler.change()\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(() => {\n            if (this.matSelect.panelOpen) {\n                this.updateInputWidth();\n            }\n        });\n        this.initMultipleHandling();\n    }\n    /**\n     * @param {?} state\n     * @return {?}\n     */\n    _emitSelectAllBooleanToParent(state) {\n        this.toggleAll.emit(state);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        setTimeout(() => {\n            this.setOverlayClass();\n        });\n        // update view when available options change\n        this.matSelect.openedChange\n            .pipe(take(1), takeUntil(this._onDestroy)).subscribe(() => {\n            this.matSelect.options.changes\n                .pipe(takeUntil(this._onDestroy))\n                .subscribe(() => {\n                this.changeDetectorRef.markForCheck();\n            });\n        });\n    }\n    /**\n     * @return {?}\n     */\n    _isToggleAllCheckboxVisible() {\n        return this.matSelect.multiple && this.showToggleAllCheckbox;\n    }\n    /**\n     * Handles the key down event with MatSelect.\n     * Allows e.g. selecting with enter key, navigation with arrow keys, etc.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleKeydown(event) {\n        // Prevent propagation for all alphanumeric characters in order to avoid selection issues\n        if ((event.key && event.key.length === 1) ||\n            (event.keyCode >= A && event.keyCode <= Z) ||\n            (event.keyCode >= ZERO && event.keyCode <= NINE) ||\n            (event.keyCode === SPACE)\n            || (this.preventHomeEndKeyPropagation && (event.keyCode === HOME || event.keyCode === END))) {\n            event.stopPropagation();\n        }\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        /** @type {?} */\n        const valueChanged = value !== this._value;\n        if (valueChanged) {\n            this._value = value;\n            this.change.emit(value);\n        }\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    onInputChange(value) {\n        /** @type {?} */\n        const valueChanged = value !== this._value;\n        if (valueChanged) {\n            this.initMultiSelectedValues();\n            this._value = value;\n            this.onChange(value);\n            this.change.emit(value);\n        }\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    onBlur(value) {\n        this.writeValue(value);\n        this.onTouched();\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Focuses the search input field\n     * @return {?}\n     */\n    _focus() {\n        if (!this.searchSelectInput || !this.matSelect.panel) {\n            return;\n        }\n        // save and restore scrollTop of panel, since it will be reset by focus()\n        // note: this is hacky\n        /** @type {?} */\n        const panel = this.matSelect.panel.nativeElement;\n        /** @type {?} */\n        const scrollTop = panel.scrollTop;\n        // focus\n        this.searchSelectInput.nativeElement.focus();\n        panel.scrollTop = scrollTop;\n    }\n    /**\n     * Resets the current search value\n     * @param {?=} focus whether to focus after resetting\n     * @return {?}\n     */\n    _reset(focus) {\n        if (!this.searchSelectInput) {\n            return;\n        }\n        this.searchSelectInput.nativeElement.value = '';\n        this.onInputChange('');\n        if (this.matOption && !focus) {\n            // remove no entries found class on mat option\n            this.matOption._getHostElement().classList.remove('mat-select-search-no-entries-found');\n        }\n        if (focus) {\n            this._focus();\n        }\n    }\n    /**\n     * Sets the overlay class  to correct offsetY\n     * so that the selected option is at the position of the select box when opening\n     * @private\n     * @return {?}\n     */\n    setOverlayClass() {\n        if (this.overlayClassSet) {\n            return;\n        }\n        /** @type {?} */\n        const overlayClasses = ['cdk-overlay-pane-select-search'];\n        if (!this.matOption) {\n            // add offset to panel if component is not placed inside mat-option\n            overlayClasses.push('cdk-overlay-pane-select-search-with-offset');\n        }\n        this.matSelect.overlayDir.attach\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(() => {\n            // note: this is hacky, but currently there is no better way to do this\n            /** @type {?} */\n            let element = this.searchSelectInput.nativeElement;\n            /** @type {?} */\n            let overlayElement;\n            while (element = element.parentElement) {\n                if (element.classList.contains('cdk-overlay-pane')) {\n                    overlayElement = element;\n                    break;\n                }\n            }\n            if (overlayElement) {\n                overlayClasses.forEach(overlayClass => {\n                    overlayElement.classList.add(overlayClass);\n                });\n            }\n        });\n        this.overlayClassSet = true;\n    }\n    /**\n     * Initializes handling <mat-select [multiple]=\"true\">\n     * Note: to improve this code, mat-select should be extended to allow disabling resetting the selection while filtering.\n     * @private\n     * @return {?}\n     */\n    initMultipleHandling() {\n        // if <mat-select [multiple]=\"true\">\n        // store previously selected values and restore them when they are deselected\n        // because the option is not available while we are currently filtering\n        this.matSelect.valueChange\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe((values) => {\n            if (this.matSelect.multiple) {\n                /** @type {?} */\n                let restoreSelectedValues = false;\n                if (this._value && this._value.length\n                    && this.previousSelectedValues && Array.isArray(this.previousSelectedValues)) {\n                    if (!values || !Array.isArray(values)) {\n                        values = [];\n                    }\n                    /** @type {?} */\n                    const optionValues = this.matSelect.options.map(option => option.value);\n                    this.previousSelectedValues.forEach(previousValue => {\n                        if (values.indexOf(previousValue) === -1 && optionValues.indexOf(previousValue) === -1) {\n                            // if a value that was selected before is deselected and not found in the options, it was deselected\n                            // due to the filtering, so we restore it.\n                            values.push(previousValue);\n                            restoreSelectedValues = true;\n                        }\n                    });\n                }\n                if (restoreSelectedValues) {\n                    this.matSelect._onChange(values);\n                }\n                this.previousSelectedValues = values;\n            }\n        });\n    }\n    /**\n     * Scrolls the currently active option into the view if it is not yet visible.\n     * @private\n     * @return {?}\n     */\n    adjustScrollTopToFitActiveOptionIntoView() {\n        if (this.matSelect.panel && this.matSelect.options.length > 0) {\n            /** @type {?} */\n            const matOptionHeight = this.getMatOptionHeight();\n            /** @type {?} */\n            const activeOptionIndex = this.matSelect._keyManager.activeItemIndex || 0;\n            /** @type {?} */\n            const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.matSelect.options, this.matSelect.optionGroups);\n            // If the component is in a MatOption, the activeItemIndex will be offset by one.\n            /** @type {?} */\n            const indexOfOptionToFitIntoView = (this.matOption ? -1 : 0) + labelCount + activeOptionIndex;\n            /** @type {?} */\n            const currentScrollTop = this.matSelect.panel.nativeElement.scrollTop;\n            /** @type {?} */\n            const searchInputHeight = this.innerSelectSearch.nativeElement.offsetHeight;\n            /** @type {?} */\n            const amountOfVisibleOptions = Math.floor((SELECT_PANEL_MAX_HEIGHT - searchInputHeight) / matOptionHeight);\n            /** @type {?} */\n            const indexOfFirstVisibleOption = Math.round((currentScrollTop + searchInputHeight) / matOptionHeight) - 1;\n            if (indexOfFirstVisibleOption >= indexOfOptionToFitIntoView) {\n                this.matSelect.panel.nativeElement.scrollTop = indexOfOptionToFitIntoView * matOptionHeight;\n            }\n            else if (indexOfFirstVisibleOption + amountOfVisibleOptions <= indexOfOptionToFitIntoView) {\n                this.matSelect.panel.nativeElement.scrollTop = (indexOfOptionToFitIntoView + 1) * matOptionHeight - (SELECT_PANEL_MAX_HEIGHT - searchInputHeight);\n            }\n        }\n    }\n    /**\n     *  Set the width of the innerSelectSearch to fit even custom scrollbars\n     *  And support all Operation Systems\n     * @return {?}\n     */\n    updateInputWidth() {\n        if (!this.innerSelectSearch || !this.innerSelectSearch.nativeElement) {\n            return;\n        }\n        /** @type {?} */\n        let element = this.innerSelectSearch.nativeElement;\n        /** @type {?} */\n        let panelElement;\n        while (element = element.parentElement) {\n            if (element.classList.contains('mat-select-panel')) {\n                panelElement = element;\n                break;\n            }\n        }\n        if (panelElement) {\n            this.innerSelectSearch.nativeElement.style.width = panelElement.clientWidth + 'px';\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    getMatOptionHeight() {\n        if (this.matSelect.options.length > 0) {\n            return this.matSelect.options.first._getHostElement().getBoundingClientRect().height;\n        }\n        return 0;\n    }\n    /**\n     *  Initialize this.previousSelectedValues once the first filtering occurs.\n     * @return {?}\n     */\n    initMultiSelectedValues() {\n        if (this.matSelect.multiple && !this._value) {\n            this.previousSelectedValues = this.matSelect.options\n                .filter(option => option.selected)\n                .map(option => option.value);\n        }\n    }\n    /**\n     * Returns whether the \"no entries found\" message should be displayed\n     * @return {?}\n     */\n    _noEntriesFound() {\n        if (!this._options) {\n            return;\n        }\n        if (this.matOption) {\n            return this.noEntriesFoundLabel && this.value && this._options.length === 1;\n        }\n        else {\n            return this.noEntriesFoundLabel && this.value && this._options.length === 0;\n        }\n    }\n}\nMatSelectSearchComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'ngx-mat-select-search',\n                template: \"<!-- Placeholder to adjust vertical offset of the mat-option elements -->\\n<input matInput class=\\\"mat-select-search-input mat-select-search-hidden\\\"/>\\n\\n<!-- Note: the  mat-datepicker-content mat-tab-header are needed to inherit the material theme colors, see PR #22 -->\\n<div\\n      #innerSelectSearch\\n      class=\\\"mat-select-search-inner mat-typography mat-datepicker-content mat-tab-header\\\"\\n      [ngClass]=\\\"{'mat-select-search-inner-multiple': matSelect.multiple, 'mat-select-search-inner-toggle-all': _isToggleAllCheckboxVisible() }\\\">\\n\\n  <mat-checkbox *ngIf=\\\"_isToggleAllCheckboxVisible()\\\"\\n                color=\\\"primary\\\"\\n                class=\\\"mat-select-search-toggle-all-checkbox\\\"\\n                [checked]=\\\"toggleAllCheckboxChecked\\\"\\n                [indeterminate]=\\\"toggleAllCheckboxIndeterminate\\\"\\n                (change)=\\\"_emitSelectAllBooleanToParent($event.checked)\\\"\\n  ></mat-checkbox>\\n\\n  <input matInput\\n         class=\\\"mat-select-search-input\\\"\\n         autocomplete=\\\"off\\\"\\n         [type]=\\\"type\\\"\\n         [value]=\\\"value\\\"\\n         #searchSelectInput\\n         (keydown)=\\\"_handleKeydown($event)\\\"\\n         (input)=\\\"onInputChange($event.target.value)\\\"\\n         (blur)=\\\"onBlur($event.target.value)\\\"\\n         [placeholder]=\\\"placeholderLabel\\\"\\n         [attr.aria-label]=\\\"ariaLabel\\\"\\n  />\\n  <mat-spinner *ngIf=\\\"searching\\\"\\n          class=\\\"mat-select-search-spinner\\\"\\n          diameter=\\\"16\\\"></mat-spinner>\\n\\n  <button mat-button\\n          *ngIf=\\\"value && !searching\\\"\\n          mat-icon-button\\n          aria-label=\\\"Clear\\\"\\n          (click)=\\\"_reset(true)\\\"\\n          class=\\\"mat-select-search-clear\\\">\\n    <ng-content *ngIf=\\\"clearIcon; else defaultIcon\\\" select=\\\"[ngxMatSelectSearchClear]\\\"></ng-content>\\n    <ng-template #defaultIcon>\\n      <mat-icon>close</mat-icon>\\n    </ng-template>\\n  </button>\\n\\n  <ng-content select=\\\".mat-select-search-custom-header-content\\\"></ng-content>\\n\\n</div>\\n\\n<div *ngIf=\\\"_noEntriesFound()\\\"\\n     class=\\\"mat-select-search-no-entries-found\\\">\\n  {{noEntriesFoundLabel}}\\n</div>\\n<!--\\nCopyright (c) 2018 Bithost GmbH All Rights Reserved.\\n\\nUse of this source code is governed by an MIT-style license that can be\\nfound in the LICENSE file at https://angular.io/license\\n-->\\n\",\n                providers: [\n                    {\n                        provide: NG_VALUE_ACCESSOR,\n                        useExisting: forwardRef(() => MatSelectSearchComponent),\n                        multi: true\n                    }\n                ],\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-select-search-hidden{visibility:hidden}.mat-select-search-inner{position:absolute;top:0;width:100%;border-bottom-width:1px;border-bottom-style:solid;z-index:100;font-size:inherit;box-shadow:none;border-radius:0;-webkit-transform:translate3d(0,0,0)}.mat-select-search-inner.mat-select-search-inner-multiple{width:100%}.mat-select-search-inner.mat-select-search-inner-multiple.mat-select-search-inner-toggle-all{display:flex;align-items:center}.mat-select-search-inner .mat-input-element{flex-basis:auto}.mat-select-search-inner .mat-input-element:-ms-input-placeholder{-ms-user-select:text}/deep/ .mat-select-search-panel{-webkit-transform:none!important;transform:none!important;overflow-x:hidden}.mat-select-search-input{padding:16px 36px 16px 16px;box-sizing:border-box}.mat-select-search-no-entries-found{padding:16px}.mat-select-search-clear{position:absolute;right:4px;top:5px}.mat-select-search-spinner{position:absolute;right:16px;top:calc(50% - 8px)}:host.mat-select-search-inside-mat-option .mat-select-search-input{padding-top:0;padding-bottom:0;height:3em;line-height:3em}:host.mat-select-search-inside-mat-option .mat-select-search-clear{top:3px}/deep/ .cdk-overlay-pane-select-search.cdk-overlay-pane-select-search-with-offset{margin-top:-50px}/deep/ .mat-option[aria-disabled=true].contains-mat-select-search{position:static;padding:0}/deep/ .mat-option[aria-disabled=true].contains-mat-select-search .mat-icon{margin-right:0}/deep/ .mat-option[aria-disabled=true].contains-mat-select-search .mat-option-pseudo-checkbox{display:none}/deep/ .mat-option[aria-disabled=true].contains-mat-select-search.mat-select-search-no-entries-found{height:6em}.mat-select-search-toggle-all-checkbox{padding-left:16px;padding-bottom:2px}\"]\n            }] }\n];\n/** @nocollapse */\nMatSelectSearchComponent.ctorParameters = () => [\n    { type: MatSelect, decorators: [{ type: Inject, args: [MatSelect,] }] },\n    { type: ChangeDetectorRef },\n    { type: ViewportRuler },\n    { type: MatOption, decorators: [{ type: Optional }, { type: Inject, args: [MatOption,] }] }\n];\nMatSelectSearchComponent.propDecorators = {\n    placeholderLabel: [{ type: Input }],\n    type: [{ type: Input }],\n    noEntriesFoundLabel: [{ type: Input }],\n    clearSearchInput: [{ type: Input }],\n    searching: [{ type: Input }],\n    disableInitialFocus: [{ type: Input }],\n    preventHomeEndKeyPropagation: [{ type: Input }],\n    disableScrollToActiveOnOptionsChanged: [{ type: Input }],\n    ariaLabel: [{ type: Input }],\n    showToggleAllCheckbox: [{ type: Input }],\n    toggleAllCheckboxChecked: [{ type: Input }],\n    toggleAllCheckboxIndeterminate: [{ type: Input }],\n    toggleAll: [{ type: Output }],\n    searchSelectInput: [{ type: ViewChild, args: ['searchSelectInput', { read: ElementRef },] }],\n    innerSelectSearch: [{ type: ViewChild, args: ['innerSelectSearch', { read: ElementRef },] }],\n    clearIcon: [{ type: ContentChild, args: [MatSelectSearchClearDirective,] }],\n    isInsideMatOption: [{ type: HostBinding, args: ['class.mat-select-search-inside-mat-option',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MatSelectSearchVersion = '1.8.0';\nclass NgxMatSelectSearchModule {\n}\nNgxMatSelectSearchModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    CommonModule,\n                    MatButtonModule,\n                    MatCheckboxModule,\n                    MatIconModule,\n                    MatInputModule,\n                    MatProgressSpinnerModule\n                ],\n                declarations: [\n                    MatSelectSearchComponent,\n                    MatSelectSearchClearDirective\n                ],\n                exports: [\n                    MatSelectSearchComponent,\n                    MatSelectSearchClearDirective\n                ]\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatSelectSearchComponent, MatSelectSearchVersion, NgxMatSelectSearchModule, MatSelectSearchClearDirective as ɵa };\n\n//# sourceMappingURL=ngx-mat-select-search.js.map","module.exports = \"<section class=\\\"byPageSection\\\">\\n  <app-view [formId]=\\\"formId\\\" (viewButtonClicked)=\\\"loadPage()\\\" [isViewPage]=\\\"true\\\" (newButtonClicked)=\\\"newPage()\\\">\\n  </app-view>\\n</section>\\n\"","module.exports = \"<div class=\\\"container main-content\\\">\\n  <mat-tab-group id=\\\"tab-group\\\">\\n    <mat-tab label=\\\"Parameters\\\">\\n      <div class=\\\"card\\\" style=\\\"margin-top: 5px;height: 93%\\\">\\n        <div class=\\\"card-body\\\" style=\\\"padding-top: 0px;height: 100%\\\">\\n          <div class=\\\"row\\\" style=\\\"height: 100%;\\\">\\n            <div class=\\\"col-md-3\\\" style=\\\"border-right: 1px solid #eeeeee;\\\">\\n              <ul class=\\\"list-group list-group-flush\\\">\\n                <ng-container *ngFor=\\\"let list of listArray\\\">\\n                  <li class=\\\"list-group-item\\\" (click)=\\\"loadListvalues(list.listId)\\\">\\n                    {{list.description}}\\n                    <i class=\\\"fa fa-arrow-right float-right\\\"></i>\\n                  </li>\\n                </ng-container>\\n              </ul>\\n            </div>\\n            <div class=\\\"col-md-9\\\" style=\\\"padding: 0;\\\">\\n              <div class=\\\"card\\\" style=\\\"margin-top: 0;height: 100%\\\">\\n                <div class=\\\"card-header\\\" style=\\\"border-bottom: 1px solid #eeeeee;\\\">\\n                  <h5 class=\\\"card-title\\\" style=\\\"font-weight: bold;\\\">{{currentList.description}}</h5>\\n                </div>\\n                <div class=\\\"card-body\\\" style=\\\"height: 100%;\\\">\\n                  <div class=\\\"row\\\" style=\\\"height: 90%\\\">\\n                    <table class=\\\"table table-hover table-sm fixed_header\\\">\\n                      <thead>\\n                        <tr>\\n                          <th style=\\\"width: 6%\\\">#</th>\\n                          <th style=\\\"font-size: 13px;font-weight: 500;width:70%\\\">Parameter value</th>\\n                          <th style=\\\"width: 24%\\\"></th>\\n                        </tr>\\n                      </thead>\\n                      <tbody>\\n                        <ng-container *ngFor=\\\"let listvalue of listvalueArray; let last = last;let i = index;\\\">\\n                          <tr>\\n                            <td>{{i+1}}</td>\\n                            <td style=\\\"font-size: 12px;\\\">\\n                              <input [(ngModel)]=\\\"listvalueArray[i].value\\\" class=\\\"form-control\\\" type=\\\"text\\\"\\n                                [disabled]=\\\"!listvalueArray[i].isEdit\\\" />\\n                            </td>\\n                            <td style=\\\"text-align: right\\\">\\n                              <a class=\\\"btn-a\\\" *ngIf=\\\"listvalueArray[i].isEdit\\\"\\n                                (click)=\\\"updateListValue(listvalueArray[i])\\\" role=\\\"button\\\">\\n                                <i class=\\\"fa fa-save\\\"></i> Save\\n                              </a>\\n                              <a class=\\\"btn-a\\\" *ngIf=\\\"!listvalueArray[i].isEdit\\\"\\n                                (click)=\\\"listvalueArray[i].isEdit = true\\\" role=\\\"button\\\">\\n                                <i class=\\\"fa fa-edit\\\"></i> Edit\\n                              </a>\\n                              <a class=\\\"btn-a\\\" *ngIf=\\\"last\\\" role=\\\"button\\\" (click)=\\\"addNewRow(listvalueArray[i])\\\">\\n                                <i class=\\\"fa fa-plus fa-lg\\\"></i> Add\\n                              </a>\\n                            </td>\\n                          </tr>\\n                        </ng-container>\\n                      </tbody>\\n                    </table>\\n                  </div>\\n                </div>\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n    </mat-tab>\\n  </mat-tab-group>\\n</div>\\n\"","module.exports = \"<div class=\\\"container main-content\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-sm-5 offset-1\\\" style=\\\"top:60px;font-size: xx-large;\\\">\\n      Wel come {{CurrentUser.displayName}}\\n    </div>\\n  </div>\\n</div>\\n\"","module.exports = \"<div class=\\\"container main-content\\\">\\n  <mat-tab-group dynamicHeight>\\n    <mat-tab label=\\\"Department\\\">\\n      <div class=\\\"buttonlist\\\">\\n        <div class=\\\"row\\\">\\n          <a class=\\\"btn-a\\\" *ngIf=\\\"department.Id != 0 || isNewDepartment\\\" (click)=\\\"back()\\\" style=\\\"color: #0a0a0a;\\\"\\n            role=\\\"button\\\">\\n            <i class=\\\"fa fa-arrow-circle-left fa-lg\\\"> Back</i>\\n          </a>\\n          <a class=\\\"btn-a\\\" *ngIf=\\\"!isNewDepartment\\\" id=\\\"btnNew\\\" (click)=\\\"newDepartment()\\\" role=\\\"button\\\">\\n            <i class=\\\"fa fa-plus fa-lg\\\"></i> New\\n          </a>\\n          <a class=\\\"btn-a\\\" id=\\\"btnUpd\\\" style=\\\"color: #0a0a0a\\\" (click)=\\\"updateDepartment()\\\" role=\\\"button\\\">\\n            <i class=\\\"fa fa-save fa-lg\\\"></i> Update\\n          </a>\\n        </div>\\n      </div>\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-md-11\\\">\\n          <div class=\\\"card\\\">\\n            <div class=\\\"card-body\\\">\\n              <fieldset>\\n                <form [formGroup]='frmDepartment'>\\n                  <div class=\\\"row\\\">\\n                    <div class=\\\"col-sm-6\\\">\\n                      <div class=\\\"row\\\">\\n                        <div class=\\\"col-md-8\\\">\\n                          <mat-form-field class=\\\"example-full-width\\\">\\n                            <input matInput placeholder=\\\"Department code\\\" formControlName=\\\"Departmentcode\\\"\\n                              name=\\\"DepartmentCode\\\" [(ngModel)]=\\\"department.DepartmentCode\\\"\\n                              [errorStateMatcher]=\\\"matcher\\\" required>\\n                          </mat-form-field>\\n                        </div>\\n                      </div>\\n                    </div>\\n                    <div class=\\\"col-sm-6\\\">\\n                      <div class=\\\"row\\\">\\n                        <div class=\\\"col-md-12\\\">\\n                          <mat-form-field class=\\\"example-full-width\\\">\\n                            <input matInput placeholder=\\\"Department name\\\" type=\\\"text\\\" formControlName=\\\"DepartmentName\\\"\\n                              name=\\\"DepartmentName\\\" [(ngModel)]=\\\"department.DepartmentName\\\"\\n                              [errorStateMatcher]=\\\"matcher\\\" required>\\n                          </mat-form-field>\\n                        </div>\\n                      </div>\\n                    </div>\\n                  </div>\\n                  <div class=\\\"row\\\">\\n                    <div class=\\\"col-md-12\\\">\\n                      <mat-form-field class=\\\"example-full-width\\\">\\n                        <textarea matInput placeholder=\\\"Extended Description\\\" formControlName=\\\"ExtendedDescription\\\"\\n                          name=\\\"ExtendedDescription\\\" [(ngModel)]=\\\"department.ExtendedDescription\\\"\\n                          [errorStateMatcher]=\\\"matcher\\\" required rows=\\\"4\\\"></textarea>\\n                      </mat-form-field>\\n                    </div>\\n                  </div>\\n                </form>\\n              </fieldset>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n    </mat-tab>\\n  </mat-tab-group>\\n</div>\\n\"","module.exports = \"<div class=\\\"container main-content\\\">\\n  <mat-tab-group dynamicHeight>\\n    <mat-tab label=\\\"Letter Summery\\\">\\n      <div class=\\\"buttonlist\\\">\\n        <div class=\\\"row\\\">\\n          <a class=\\\"btn-a\\\" *ngIf=\\\"letter.Id != 0 || isNewLetter\\\" (click)=\\\"back()\\\" style=\\\"color: #0a0a0a;\\\" role=\\\"button\\\">\\n            <i class=\\\"fa fa-arrow-circle-left fa-lg\\\"> Back</i>\\n          </a>\\n          <a class=\\\"btn-a\\\" *ngIf=\\\"!isNewLetter\\\" id=\\\"btnNew\\\" (click)=\\\"newLetter()\\\" role=\\\"button\\\">\\n            <i class=\\\"fa fa-plus fa-lg\\\"></i> New\\n          </a>\\n          <a class=\\\"btn-a\\\" id=\\\"btnUpd\\\" style=\\\"color: #0a0a0a\\\" (click)=\\\"documentEditForm.ngSubmit.emit()\\\" role=\\\"button\\\">\\n            <i class=\\\"fa fa-save fa-lg\\\"></i> Update\\n          </a>\\n        </div>\\n      </div>\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-md-12\\\">\\n          <fieldset>\\n            <form [formGroup]='frmLetter' (ngSubmit)=\\\"updateLetter()\\\" #documentEditForm=\\\"ngForm\\\">\\n              <mat-tab-group dynamicHeight>\\n                <mat-tab label=\\\"Summery\\\">\\n                  <div class=\\\"card\\\" style=\\\"margin-top: 10px;\\\">\\n                    <div class=\\\"card-body\\\">\\n                      <div class=\\\"row\\\">\\n                        <div class=\\\"col-md-6\\\">\\n                          <div class=\\\"row\\\">\\n                            <div class=\\\"col-md-12\\\">\\n                              <app-matselect [listId]=\\\"1001\\\" [isaParameter]=\\\"false\\\" [InitValue]=\\\"letter.DepartmentId\\\"\\n                                placeholder=\\\"Department\\\" (SelectedValueChanged)=\\\"letter.DepartmentId = $event\\\"\\n                                formControlName=\\\"DepartmentId\\\" [(ngModel)]=\\\"letter.DepartmentId\\\">\\n                              </app-matselect>\\n                            </div>\\n                          </div>\\n                          <div class=\\\"row\\\">\\n                            <div class=\\\"col-md-12\\\">\\n                              <app-matselect [listId]=\\\"2\\\" [isaParameter]=\\\"true\\\" [InitValue]=\\\"letter.LetterCategory\\\"\\n                                placeholder=\\\"Letter Category\\\" (SelectedValueChanged)=\\\"letter.LetterCategory = $event\\\"\\n                                formControlName=\\\"LetterCategory\\\" [(ngModel)]=\\\"letter.LetterCategory\\\">\\n                              </app-matselect>\\n                            </div>\\n                          </div>\\n                          <div class=\\\"row\\\">\\n                            <div class=\\\"col-md-12\\\">\\n                              <mat-form-field class=\\\"example-full-width\\\">\\n                                <input matInput placeholder=\\\"LetterRefNO\\\" type=\\\"text\\\" name=\\\"LetterRefNO\\\"\\n                                  formControlName=\\\"LetterRefNO\\\" [(ngModel)]=\\\"letter.LetterRefNO\\\"\\n                                  [errorStateMatcher]=\\\"matcher\\\" required>\\n                              </mat-form-field>\\n                            </div>\\n                          </div>\\n                          <div class=\\\"row\\\">\\n                            <div class=\\\"col-md-12\\\">\\n                              <mat-form-field class=\\\"example-full-width\\\">\\n                                <input matInput placeholder=\\\"Letter Code\\\" type=\\\"text\\\" name=\\\"LetterCode\\\"\\n                                  formControlName=\\\"LetterCode\\\" [(ngModel)]=\\\"letter.LetterCode\\\">\\n                              </mat-form-field>\\n                            </div>\\n                          </div>\\n                          <div class=\\\"row\\\">\\n                            <div class=\\\"col-md-12\\\">\\n                              <app-matselect [listId]=\\\"1003\\\" [InitValue]=\\\"letter.ReferenceLetterId\\\"\\n                                placeholder=\\\"Reference Letter\\\"\\n                                (SelectedValueChanged)=\\\"letter.ReferenceLetterId = $event\\\"\\n                                formControlName=\\\"ReferenceLetter\\\" [(ngModel)]=\\\"letter.ReferenceLetterId\\\">\\n                              </app-matselect>\\n                            </div>\\n                          </div>\\n                          <div class=\\\"row\\\">\\n                            <div class=\\\"col-md-12\\\">\\n                              <mat-form-field class=\\\"example-full-width\\\">\\n                                <textarea matInput placeholder=\\\"To Whom\\\" formControlName=\\\"ToWhom\\\" name=\\\"ToWhom\\\"\\n                                  [(ngModel)]=\\\"letter.ToWhom\\\" [errorStateMatcher]=\\\"matcher\\\" required></textarea>\\n                              </mat-form-field>\\n                            </div>\\n                          </div>\\n                          <div class=\\\"row\\\">\\n                            <div class=\\\"col-md-12\\\">\\n                              <mat-form-field class=\\\"example-full-width\\\">\\n                                <textarea matInput placeholder=\\\"Subject\\\" rows=\\\"5\\\" formControlName=\\\"Subject\\\"\\n                                  [(ngModel)]=\\\"letter.Subject\\\" name=\\\"Subject\\\"></textarea>\\n                              </mat-form-field>\\n                            </div>\\n                          </div>\\n                        </div>\\n                        <div class=\\\"col-sm-6\\\">\\n                          <div class=\\\"row mat-radio-group\\\">\\n                            <div class=\\\"col-md-12\\\">\\n                              <mat-radio-group formControlName=\\\"SendOrReceive\\\" name=\\\"SendOrReceive\\\"\\n                                [(ngModel)]=\\\"letter.SendOrReceive\\\">\\n                                <mat-radio-button [checked]=\\\"letter.SendOrReceive == 1\\\" style=\\\"margin-right: 10px;\\\"\\n                                  value=\\\"1\\\">Send </mat-radio-button>\\n                                <mat-radio-button value=\\\"2\\\" [checked]=\\\"letter.SendOrReceive == 2\\\">Receive\\n                                </mat-radio-button>\\n                              </mat-radio-group>\\n                            </div>\\n                          </div>\\n                          <div class=\\\"row\\\">\\n                            <div class=\\\"col-md-12\\\">\\n                              <mat-form-field>\\n                                <input matInput [matDatepicker]=\\\"picker\\\" name=\\\"SendOrReceiveDate\\\"\\n                                  formControlName=\\\"SendOrReceiveDate\\\" [(ngModel)]=\\\"letter.SendOrReceiveDate\\\"\\n                                  placeholder=\\\"Send/Receive Date\\\" [value]=\\\"letter.SendOrReceiveDate\\\">\\n                                <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\n                                <mat-datepicker touchUi #picker></mat-datepicker>\\n                              </mat-form-field>\\n                            </div>\\n                          </div>\\n                          <div class=\\\"row\\\">\\n                            <div class=\\\"col-md-12\\\">\\n                              <app-matselect [listId]=\\\"1\\\" [isaParameter]=\\\"true\\\" [InitValue]=\\\"letter.PostType\\\"\\n                                placeholder=\\\"Post type\\\" (SelectedValueChanged)=\\\"letter.PostType = $event\\\"\\n                                formControlName=\\\"PostType\\\" [(ngModel)]=\\\"letter.PostType\\\">\\n                              </app-matselect>\\n                            </div>\\n                          </div>\\n                          <div class=\\\"row\\\">\\n                            <div class=\\\"col-md-12\\\">\\n                              <mat-form-field class=\\\"example-full-width\\\">\\n                                <textarea matInput placeholder=\\\"From Address\\\" rows=\\\"5\\\" formControlName=\\\"FromAddress\\\"\\n                                  [(ngModel)]=\\\"letter.FromAddress\\\" name=\\\"FromAddress\\\" [errorStateMatcher]=\\\"matcher\\\"\\n                                  required></textarea>\\n                              </mat-form-field>\\n                            </div>\\n                          </div>\\n                          <div class=\\\"row\\\">\\n                            <div class=\\\"col-md-12\\\">\\n                              <mat-form-field class=\\\"example-full-width\\\">\\n                                <textarea matInput placeholder=\\\"To Address\\\" rows=\\\"5\\\" formControlName=\\\"ToAddress\\\"\\n                                  [(ngModel)]=\\\"letter.ToAddress\\\" [errorStateMatcher]=\\\"matcher\\\" name=\\\"ToAddress\\\"\\n                                  required></textarea>\\n                              </mat-form-field>\\n                            </div>\\n                          </div>\\n                        </div>\\n                      </div>\\n                    </div>\\n                  </div>\\n                </mat-tab>\\n                <mat-tab label=\\\"Letter Contant\\\">\\n                  <div class=\\\"row h-100\\\">\\n                    <div class=\\\"col-md-12\\\">\\n                      <div class=\\\"card h-100 mt-0\\\">\\n                        <div class=\\\"card-header bg-dark\\\">\\n                          <h3 class=\\\"card-title\\\" style=\\\"color: #ffffff\\\">Letter contant/ Description</h3>\\n                        </div>\\n                        <div class=\\\"card-body\\\" style=\\\"background-color: rgb(63, 62, 62);\\\">\\n                          <div class=\\\"row h-75\\\">\\n                            <div class=\\\"contentEditable\\\" contentEditable=\\\"true\\\" placeholder=\\\"Enter text here...\\\"\\n                              [innerText]=\\\"letter.LetterContant\\\" (input)=\\\"this.letterContant = $event.target.innerText\\\">\\n                            </div>\\n                          </div>\\n                        </div>\\n                      </div>\\n                    </div>\\n                  </div>\\n                </mat-tab>\\n              </mat-tab-group>\\n            </form>\\n          </fieldset>\\n        </div>\\n      </div>\\n    </mat-tab>\\n    <!--mat-tab label=\\\"Attachments\\\" [disabled]=\\\"!isNewLetter\\\">\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-md-12\\\">\\n          <div class=\\\"card\\\">\\n            <div class=\\\"card-body\\\">\\n              <div class=\\\"row\\\">\\n                <div class=\\\"custom-file\\\">\\n                  <input type=\\\"file\\\" class=\\\"custom-file-input\\\" id=\\\"inputGroupFile01\\\"\\n                    aria-describedby=\\\"inputGroupFileAddon01\\\">\\n                  <label class=\\\"custom-file-label\\\" for=\\\"inputGroupFile01\\\">Choose file</label>\\n                </div>\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n    </mat-tab-->\\n    <mat-tab label=\\\"History\\\" [disabled]=\\\"isNewLetter\\\">\\n\\n    </mat-tab>\\n  </mat-tab-group>\\n</div>\\n\"","module.exports = \"<section class=\\\"byPageSection\\\">\\n  <div class=\\\"container-fluid\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"container-fluid buttonlist\\\">\\n        <div class=\\\"row\\\">\\n          <a class=\\\"btn-a\\\" (click)=\\\"newLetter()\\\" role=\\\"button\\\">\\n            <i class=\\\"fa fa-plus fa-lg\\\"></i> New\\n          </a>\\n        </div>\\n      </div>\\n    </div>\\n    <div class=\\\"row\\\" style=\\\"margin-top: 20px;\\\">\\n      <div class=\\\"col-sm-3\\\">\\n        <app-matselect placeholder=\\\"Department\\\" [listId]=\\\"1001\\\" [(ngModel)]=\\\"departnemtId\\\" [InitValue]=\\\"1\\\"\\n          (SelectedValueChanged)=\\\"departnemtId = $event\\\">\\n        </app-matselect>\\n      </div>\\n      <div class=\\\"col-sm-3\\\">\\n        <mat-form-field>\\n          <input matInput [matDatepicker]=\\\"pickerfrom\\\" placeholder=\\\"from\\\" [(ngModel)]=\\\"frmDate\\\">\\n          <mat-datepicker-toggle matSuffix [for]=\\\"pickerfrom\\\"></mat-datepicker-toggle>\\n          <mat-datepicker #pickerfrom></mat-datepicker>\\n        </mat-form-field>\\n      </div>\\n      <div class=\\\"col-sm-3\\\">\\n        <mat-form-field>\\n          <input matInput [matDatepicker]=\\\"pickerTo\\\" placeholder=\\\"To\\\" [(ngModel)]=\\\"toDate\\\">\\n          <mat-datepicker-toggle matSuffix [for]=\\\"pickerTo\\\"></mat-datepicker-toggle>\\n          <mat-datepicker #pickerTo></mat-datepicker>\\n        </mat-form-field>\\n      </div>\\n      <div class=\\\"col-sm-3\\\">\\n        <a class=\\\"btn-a\\\" id=\\\"btnUpd\\\" style=\\\"color: #0a0a0a\\\" role=\\\"button\\\" (click)=\\\"findData()\\\">\\n          <i class=\\\"fa fa-search fa-lg\\\"></i> Find\\n        </a>\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\\\"row\\\">\\n    <div class=\\\"container-fluid\\\">\\n      <div class=\\\"col-md-12\\\">\\n        <div class=\\\"table-responsive\\\">\\n          <mat-form-field class=\\\"example-full-width\\\" style=\\\"margin-top: 20px;\\\">\\n            <input matInput type=\\\"text\\\" (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\n          </mat-form-field>\\n          <table class=\\\"table table-hover table-sm fixed_header\\\" matSort (matSortChange)=\\\"sortData($event)\\\">\\n            <thead>\\n              <tr>\\n                <ng-container *ngFor=\\\"let col of details.Columns\\\">\\n                  <th style=\\\"font-size: 13px;font-weight: 500;\\\" *ngIf=\\\"col.IsVisible\\\"\\n                    mat-sort-header=\\\"{{col.ColumnName}}\\\">{{col.DisplayName}}</th>\\n                </ng-container>\\n                <th></th>\\n              </tr>\\n            </thead>\\n            <tbody>\\n              <ng-container *ngFor=\\\"let rowData of dataSource\\\">\\n                <tr>\\n                  <ng-container *ngFor=\\\"let col of details.Columns\\\">\\n                    <td style=\\\"font-size: 12px;\\\" *ngIf=\\\"col.IsVisible\\\">{{rowData | Columns:col.ColumnName}}</td>\\n                  </ng-container>\\n                  <td>\\n                    <a class=\\\"btn-a\\\" (click)=\\\"ViewButtonClicked(details.Url,details.FormId,rowData.Id)\\\" role=\\\"button\\\">\\n                      <i class=\\\"fa fa-eye\\\"></i> View</a>\\n                  </td>\\n                </tr>\\n              </ng-container>\\n            </tbody>\\n          </table>\\n        </div>\\n        <div class=\\\"row pull-right\\\">\\n          <mat-paginator #paginator [pageSize]=\\\"pageSize\\\" [pageSizeOptions]=\\\"[20,50, 100, 500,1000]\\\"\\n            [showFirstLastButtons]=\\\"true\\\" [length]=\\\"totalSize\\\" [pageIndex]=\\\"currentPage\\\" (page)=\\\"handlePage($event)\\\">\\n          </mat-paginator>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</section>\\n\"","module.exports = \"<mat-form-field>\\n  <mat-select [formControl]=\\\"frmctrlMatselect\\\" placeholder=\\\"{{placeholder}}\\\" (selectionChange)=\\\"OnValueChanged()\\\"\\n    #selectId>\\n    <mat-option>\\n      <ngx-mat-select-search [formControl]=\\\"frmCtrlFilterCtrl\\\"></ngx-mat-select-search>\\n    </mat-option>\\n\\n    <mat-option *ngFor=\\\"let Option of filteredoptions | async\\\" [value]=\\\"Option.id\\\">\\n      {{Option.value}}\\n    </mat-option>\\n  </mat-select>\\n</mat-form-field>\\n\"","module.exports = \"<div class=\\\"container main-content\\\">\\n  <mat-tab-group dynamicHeight>\\n    <mat-tab label=\\\"User\\\">\\n      <div class=\\\"buttonlist\\\">\\n        <div class=\\\"row\\\">\\n          <a class=\\\"btn-a\\\" *ngIf=\\\"user.Id != 0 || isNewUser\\\" (click)=\\\"back()\\\" style=\\\"color: #0a0a0a;\\\" role=\\\"button\\\">\\n            <i class=\\\"fa fa-arrow-circle-left fa-lg\\\"> Back</i>\\n          </a>\\n          <a class=\\\"btn-a\\\" *ngIf=\\\"!isNewUser\\\" id=\\\"btnNew\\\" (click)=\\\"newUser()\\\" role=\\\"button\\\">\\n            <i class=\\\"fa fa-plus fa-lg\\\"></i> New\\n          </a>\\n          <a class=\\\"btn-a\\\" id=\\\"btnUpd\\\" style=\\\"color: #0a0a0a\\\" (click)=\\\"documentEditForm.ngSubmit.emit()\\\" role=\\\"button\\\">\\n            <i class=\\\"fa fa-save fa-lg\\\"></i> Update\\n          </a>\\n        </div>\\n      </div>\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-md-12\\\">\\n          <div class=\\\"card\\\">\\n            <div class=\\\"card-body\\\">\\n              <fieldset>\\n                <form [formGroup]='frmUserProfile' (ngSubmit)=\\\"updateUser()\\\" #documentEditForm=\\\"ngForm\\\">\\n                  <div class=\\\"row\\\">\\n                    <div class=\\\"col-md-6\\\">\\n                      <div class=\\\"row\\\">\\n                        <div class=\\\"col-md-3\\\">\\n                          <app-matselect [listId]=\\\"4\\\" [isaParameter]=\\\"true\\\" [InitValue]=\\\"user.Title\\\" placeholder=\\\"Title\\\"\\n                            [(ngModel)]=\\\"user.Title\\\" (SelectedValueChanged)=\\\"user.Title = $event\\\"\\n                            formControlName=\\\"Title\\\">\\n                          </app-matselect>\\n                        </div>\\n                        <div class=\\\"col-md-9\\\">\\n                          <mat-form-field class=\\\"example-full-width\\\">\\n                            <input matInput placeholder=\\\"Full name\\\" type=\\\"text\\\" name=\\\"FullName\\\"\\n                              formControlName=\\\"FullName\\\" [(ngModel)]=\\\"user.FullName\\\" [errorStateMatcher]=\\\"matcher\\\"\\n                              required>\\n                          </mat-form-field>\\n                        </div>\\n                      </div>\\n                      <div class=\\\"row\\\">\\n                        <div class=\\\"col-md-12\\\">\\n                          <mat-form-field class=\\\"example-full-width\\\">\\n                            <input matInput placeholder=\\\"Display name\\\" type=\\\"text\\\" name=\\\"DisplayName\\\"\\n                              formControlName=\\\"DisplayName\\\" [(ngModel)]=\\\"user.DisplayName\\\" [errorStateMatcher]=\\\"matcher\\\"\\n                              required>\\n                          </mat-form-field>\\n                        </div>\\n                      </div>\\n                      <div class=\\\"row\\\">\\n                        <div class=\\\"col-md-12\\\">\\n                          <app-matselect [listId]=\\\"1001\\\" [InitValue]=\\\"user.DepartmentId\\\" placeholder=\\\"Department\\\"\\n                            (SelectedValueChanged)=\\\"user.DepartmentId = $event\\\" formControlName=\\\"DepartmentId\\\"\\n                            [(ngModel)]=\\\"user.DepartmentId\\\">\\n                          </app-matselect>\\n                        </div>\\n                      </div>\\n                      <div class=\\\"row\\\">\\n                        <div class=\\\"col-md-12\\\">\\n                          <app-matselect [listId]=\\\"3\\\" [isaParameter]=\\\"true\\\" [InitValue]=\\\"user.UserLevel\\\"\\n                            placeholder=\\\"User level\\\" (SelectedValueChanged)=\\\"user.UserLevel = $event\\\"\\n                            formControlName=\\\"UserLevel\\\" [(ngModel)]=\\\"user.UserLevel\\\">\\n                          </app-matselect>\\n                        </div>\\n                      </div>\\n                    </div>\\n                    <div class=\\\"col-md-5\\\">\\n                      <div class=\\\"row\\\">\\n                        <div class=\\\"col-md-12\\\">\\n                          <mat-form-field class=\\\"example-full-width\\\">\\n                            <input matInput placeholder=\\\"Email\\\" type=\\\"text\\\" name=\\\"Email\\\" formControlName=\\\"Email\\\"\\n                              [(ngModel)]=\\\"user.Email\\\" [errorStateMatcher]=\\\"matcher\\\" required>\\n                          </mat-form-field>\\n                        </div>\\n                      </div>\\n                      <div class=\\\"row\\\">\\n                        <div class=\\\"col-md-12\\\">\\n                          <mat-form-field class=\\\"example-full-width\\\">\\n                            <input matInput placeholder=\\\"Username\\\" type=\\\"text\\\" name=\\\"UserName\\\"\\n                              formControlName=\\\"UserName\\\" [(ngModel)]=\\\"user.UserName\\\" [errorStateMatcher]=\\\"matcher\\\"\\n                              required>\\n                          </mat-form-field>\\n                        </div>\\n                      </div>\\n\\n                      <section *ngIf=\\\"isNewUser\\\">\\n                        <div class=\\\"row\\\">\\n                          <div class=\\\"col-md-12\\\">\\n                            <mat-form-field class=\\\"example-full-width\\\">\\n                              <input matInput placeholder=\\\"Password\\\" type=\\\"password\\\" name=\\\"Password\\\"\\n                                [(ngModel)]=\\\"user.Password\\\" formControlName=\\\"Password\\\">\\n                            </mat-form-field>\\n                          </div>\\n                        </div>\\n                        <div class=\\\"row\\\">\\n                          <div class=\\\"col-md-12\\\">\\n                            <mat-form-field class=\\\"example-full-width\\\">\\n                              <input matInput placeholder=\\\"Confirm password\\\" type=\\\"password\\\" name=\\\"ConfirmPassword\\\"\\n                                [(ngModel)]=\\\"user.ConfirmPassword\\\" formControlName=\\\"ConfirmPassword\\\"\\n                                [errorStateMatcher]=\\\"matcher\\\">\\n                              <mat-error *ngIf=\\\"frmUserProfile.hasError('notSame')\\\">\\n                                Passwords do not match\\n                              </mat-error>\\n                            </mat-form-field>\\n                          </div>\\n                        </div>\\n                      </section>\\n                    </div>\\n                  </div>\\n                </form>\\n              </fieldset>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n    </mat-tab>\\n  </mat-tab-group>\\n</div>\\n\"","module.exports = \"<div *ngIf=\\\"isViewPage\\\">\\n  <div class=\\\"container-fluid buttonlist\\\" *ngIf=\\\"!IsBtnlstHiddn\\\">\\n    <div class=\\\"row\\\">\\n      <a class=\\\"btn-a\\\" (click)=\\\"NewButtonClicked(details.Url,details.FormId)\\\" role=\\\"button\\\">\\n        <i class=\\\"fa fa-plus fa-lg\\\"></i> New\\n      </a>\\n    </div>\\n  </div>\\n  <div class=\\\"container-fluid\\\">\\n    <div class=\\\"col-md-12\\\">\\n      <div class=\\\"table-responsive\\\">\\n        <mat-form-field class=\\\"example-full-width\\\" style=\\\"margin-top: 20px;\\\">\\n          <input matInput type=\\\"text\\\" (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\n        </mat-form-field>\\n        <table class=\\\"table table-hover table-sm fixed_header\\\" matSort (matSortChange)=\\\"sortData($event)\\\">\\n          <thead>\\n            <tr>\\n              <ng-container *ngFor=\\\"let col of details.Columns\\\">\\n                <th style=\\\"font-size: 13px;font-weight: 500;\\\" *ngIf=\\\"col.IsVisible\\\"\\n                  mat-sort-header=\\\"{{col.ColumnName}}\\\">{{col.DisplayName}}</th>\\n              </ng-container>\\n              <th></th>\\n            </tr>\\n          </thead>\\n          <tbody>\\n            <ng-container *ngFor=\\\"let rowData of dataSource\\\">\\n              <tr>\\n                <ng-container *ngFor=\\\"let col of details.Columns\\\">\\n                  <td style=\\\"font-size: 12px;\\\" *ngIf=\\\"col.IsVisible\\\">{{rowData | Columns:col.ColumnName}}</td>\\n                </ng-container>\\n                <td>\\n                  <a class=\\\"btn-a\\\" (click)=\\\"ViewButtonClicked(details.Url,details.FormId,rowData.Id)\\\" role=\\\"button\\\">\\n                    <i class=\\\"fa fa-eye\\\"></i> View</a>\\n                </td>\\n              </tr>\\n            </ng-container>\\n          </tbody>\\n        </table>\\n      </div>\\n      <div class=\\\"row pull-right\\\">\\n        <mat-paginator #paginator [pageSize]=\\\"pageSize\\\" [pageSizeOptions]=\\\"[20,50, 100, 500,1000]\\\"\\n          [showFirstLastButtons]=\\\"true\\\" [length]=\\\"totalSize\\\" [pageIndex]=\\\"currentPage\\\" (page)=\\\"handlePage($event)\\\">\\n        </mat-paginator>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\\n<div *ngIf=\\\"!isViewPage\\\">\\n  <div class=\\\"container-fluid buttonlist\\\" *ngIf=\\\"!IsBtnlstHiddn\\\">\\n    <div class=\\\"row\\\">\\n      <a class=\\\"btn-a\\\" (click)=\\\"onNewButtonClicked()\\\" role=\\\"button\\\">\\n        <i class=\\\"fa fa-plus fa-lg\\\"></i> New\\n      </a>\\n    </div>\\n  </div>\\n  <div class=\\\"container-fluid\\\">\\n    <div class=\\\"col-md-12\\\">\\n      <div class=\\\"table-responsive\\\">\\n        <mat-form-field class=\\\"example-full-width\\\" style=\\\"margin-top: 20px;\\\">\\n          <input matInput type=\\\"text\\\" (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\n        </mat-form-field>\\n        <table class=\\\"table table-hover table-sm fixed_header\\\" matSort (matSortChange)=\\\"sortData($event)\\\">\\n          <thead>\\n            <tr>\\n              <ng-container *ngFor=\\\"let col of details.Columns\\\">\\n                <th style=\\\"font-size: 13px;font-weight: 500;\\\" *ngIf=\\\"col.IsVisible\\\"\\n                  mat-sort-header=\\\"{{col.ColumnName}}\\\">{{col.DisplayName}}</th>\\n              </ng-container>\\n              <th></th>\\n            </tr>\\n          </thead>\\n          <tbody>\\n            <ng-container *ngFor=\\\"let rowData of dataSource\\\">\\n              <tr>\\n                <ng-container *ngFor=\\\"let col of details.Columns\\\">\\n                  <td style=\\\"font-size: 12px;\\\" *ngIf=\\\"col.IsVisible\\\">{{rowData | Columns:col.ColumnName}}</td>\\n                </ng-container>\\n                <td>\\n                  <a class=\\\"btn-a\\\" (click)=\\\"onViewButtonClicked(rowData.Id)\\\" role=\\\"button\\\">\\n                    <i class=\\\"fa fa-eye\\\"></i> View</a>\\n                </td>\\n              </tr>\\n            </ng-container>\\n          </tbody>\\n        </table>\\n      </div>\\n      <div class=\\\"row pull-right\\\">\\n        <mat-paginator #paginator [pageSize]=\\\"pageSize\\\" [pageSizeOptions]=\\\"[20,50, 100, 500,1000]\\\"\\n          [showFirstLastButtons]=\\\"true\\\" [length]=\\\"totalSize\\\" [pageIndex]=\\\"currentPage\\\" (page)=\\\"handlePage($event)\\\">\\n        </mat-paginator>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\"","export class Department {\n    Id = 0;\n    ParentId = 0;\n    DepartmentCode = '';\n    DepartmentName = '';\n    ExtendedDescription = '';\n    DepStatus = 0;\n}\n","export class Letter {\n    Id = 0;\n    LetterCode = 'AUTO GENERATED CODE';\n    LetterRefNO = '';\n    LetterCategory = 1;\n    DepartmentId = 1;\n    CreatedUserId = 0;\n    CreatedDate = new Date();\n    ReferenceLetterId = 0;\n    FromAddress = '';\n    ToAddress = '';\n    ToWhom = '';\n    SendOrReceive = 0;\n    PostType = 0;\n    Subject = '';\n    // LetterDoc;\n    Progress = '';\n    LetterContant = '';\n    SendOrReceiveDate = new Date();\n}\n","export class User {\n    Id = 0;\n    UserName = '';\n    Title = 1;\n    FullName = '';\n    DisplayName = '';\n    Email = '';\n    UserLevel = 1;\n    Password = '';\n    ConfirmPassword = '';\n    CreatedDate = new Date();\n    DepartmentId = 1;\n    Status = 1;\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Toast } from '../../common/models/toast';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { map, catchError } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport { throwError } from 'rxjs';\nimport { Router } from '@angular/router';\n@Injectable({\n  providedIn: 'root'\n})\nexport class CommonService {\n  baseUrl = environment.baseUrl;\n  UserToken: '';\n\n  constructor(private httpClient: HttpClient, private router: Router) {\n  }\n\n  getController(formId) {\n    const forms = [{\n      formid: 1001\n      , control: 'Department'\n    }, {\n      formid: 1002\n      , control: 'User'\n    },\n    {\n      formid: 1003\n      , control: 'Letter'\n    }, {\n      formid: 0\n      , control: 'Common'\n    }\n    ];\n    const frm = forms.filter(a => a.formid === parseInt(formId, 10));\n    if (frm.length > 0) {\n      return frm[0].control;\n    } else {\n      return '';\n    }\n  }\n\n  httpCllaUrl(url: string): Observable<any> {\n    this.getToken();\n    const httpOptions = {\n      headers: new HttpHeaders({\n        Authorization: 'Bearer ' + this.UserToken,\n        'Content-Type': 'application/json',\n      })\n    };\n    return this.httpClient\n      .get(this.baseUrl + url, httpOptions).pipe(\n        map(res => res),\n        catchError(this.handleError)\n      );\n  }\n\n  httpGetData(formId: number, id: number): Observable<any> {\n    this.getToken();\n    const httpOptions = {\n      headers: new HttpHeaders({\n        Authorization: 'Bearer ' + this.UserToken,\n        'Content-Type': 'application/json',\n      })\n    };\n    const Controller = this.getController(formId);\n    if (Controller !== '') {\n      return this.httpClient\n        .get(this.baseUrl + Controller + '/' + id, httpOptions)\n        .pipe(\n          map(res => res),\n          catchError(this.handleError)\n        );\n    } else {\n      throwError('Page not found...!');\n    }\n  }\n\n  httpGetListValue(listId: number, isaParameter: boolean): Observable<any> {\n    this.getToken();\n    const httpOptions = {\n      headers: new HttpHeaders({\n        Authorization: 'Bearer ' + this.UserToken,\n        'Content-Type': 'application/json',\n      })\n    };\n    //const Controller = this.getController(formId);\n    return this.httpClient\n      .get(this.baseUrl + 'Common/listvalue/' + listId + '/' + isaParameter, httpOptions)\n      .pipe(\n        map(res => res),\n        catchError(this.handleError)\n      );\n  }\n\n  httpGetPairValues(id: number, filter: string = ''): Observable<any> {\n    this.getToken();\n    const httpOptions = {\n      headers: new HttpHeaders({\n        Authorization: 'Bearer ' + this.UserToken,\n        'Content-Type': 'application/json',\n      })\n    };\n    if (filter === '') {\n      return this.httpClient\n        .get(this.baseUrl + 'Common/GetPairValue?id=' + id, httpOptions).pipe(\n          map(res => res),\n          catchError(this.handleError)\n        );\n    } else {\n      return this.httpClient\n        .get(this.baseUrl + 'Common/GetPairValue?id=' + id + '&filter=' + filter, httpOptions).pipe(\n          map(res => res),\n          catchError(this.handleError)\n        );\n    }\n  }\n\n  httpGetList({ formId, start, limit, filter }): Observable<any> {\n    this.getToken();\n    const httpOptions = {\n      headers: new HttpHeaders({\n        Authorization: 'Bearer ' + this.UserToken,\n        'Content-Type': 'application/json',\n      })\n    };\n    const Controller = this.getController(formId);\n    if (Controller === '') { return throwError('Page not found...!'); }\n    const url = this.baseUrl + Controller + '/' + start\n      + '/' + limit + '/' + filter;\n    return this.httpClient\n      .get(url, httpOptions).pipe(\n        map(res => res),\n        catchError(this.handleError)\n      );\n  }\n\n  httpPost(Obj: any, formId: number, id: number) {\n    this.getToken();\n    const httpOptions = {\n      headers: new HttpHeaders({\n        Authorization: 'Bearer ' + this.UserToken,\n        'Content-Type': 'application/json',\n      })\n    };\n    const Controller = this.getController(formId);\n    Obj.ObId = undefined;\n    return this.httpClient.post(this.baseUrl + Controller + '/' + id, JSON.stringify(Obj), httpOptions)\n      .pipe(\n        map(res => res),\n        catchError(this.handleError)\n      );\n    /*\n    if (id === 0) {\n      return this.httpClient.post(this.baseUrl + Controller, JSON.stringify(Obj), httpOptions)\n        .pipe(\n          map(res => res),\n          catchError(this.handleError)\n        );\n    } else {\n      return this.httpClient.put(this.baseUrl + Controller + '/put/' + id, JSON.stringify(Obj), httpOptions)\n        .pipe(\n          map(res => res),\n          catchError(this.handleError)\n        );\n    }\n    */\n  }\n\n  handleError(error) {\n    let errorMessage = '';\n    if (error.status == 401) {\n      errorMessage = 'Unauthorized Access...!';\n      localStorage.removeItem('currentUser');\n    }\n    if (error.error instanceof ErrorEvent) {\n      errorMessage = error.error.message;\n    } else {\n      errorMessage = error.error.ExceptionMessage;\n      console.log('Error Code: ' + error.status + '<br/>Message: ' + error.error.ExceptionMessage);\n    }\n    // new Toast().Danger(errorMessage);\n    return throwError(errorMessage);\n  }\n\n  getToken() {\n    if (localStorage.getItem('currentUser')) {\n      const userObj: any = JSON.parse(localStorage.getItem('currentUser'));\n      this.UserToken = userObj.token;\n    } else {\n      this.router.navigateByUrl('/login');\n      return false;\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { AdminLayoutRoutes } from './admin-layout.routing';\nimport { DatePipe } from '@angular/common';\n\nimport { MaterialModule } from 'app/materialodule';\n\nimport { ConfigurationService } from '../../common/services/configuration.service';\nimport { UserprofileComponent } from 'app/pages/userprofile/userprofile.component';\nimport { DashboardComponent } from 'app/pages/dashboard/dashboard.component';\nimport { ViewComponent, ColumnsPipe } from 'app/pages/view/view.component';\nimport { CommonviewpageComponent } from 'app/pages/commonviewpage/commonviewpage.component';\nimport { DepartmentComponent } from 'app/pages/department/department.component';\nimport { MatselectComponent } from 'app/pages/matselect/matselect.component';\nimport { NgxMatSelectSearchModule } from 'ngx-mat-select-search';\nimport { LetterComponent } from 'app/pages/letter/letter.component';\nimport { LetterviewComponent } from 'app/pages/letterview/letterview.component';\nimport { ConfigurationsComponent } from 'app/pages/configurations/configurations.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild(AdminLayoutRoutes),\n    FormsModule,\n    ReactiveFormsModule,\n    MaterialModule,\n    NgxMatSelectSearchModule,\n  ],\n  declarations: [\n    UserprofileComponent,\n    DashboardComponent,\n    ViewComponent,\n    ColumnsPipe,\n    CommonviewpageComponent,\n    DepartmentComponent,\n    MatselectComponent,\n    LetterComponent,\n    LetterviewComponent,\n    ConfigurationsComponent\n  ],\n  providers: [ConfigurationService, DatePipe],\n})\n\nexport class AdminLayoutModule { }\n","import { Routes } from '@angular/router';\nimport { DashboardComponent } from 'app/pages/dashboard/dashboard.component';\n\nimport { CommonviewpageComponent } from 'app/pages/commonviewpage/commonviewpage.component';\nimport { UserprofileComponent } from 'app/pages/userprofile/userprofile.component';\nimport { DepartmentComponent } from 'app/pages/department/department.component';\nimport { MatselectComponent } from 'app/pages/matselect/matselect.component';\nimport { LetterviewComponent } from 'app/pages/letterview/letterview.component';\nimport { LetterComponent } from 'app/pages/letter/letter.component';\nimport { ConfigurationsComponent } from 'app/pages/configurations/configurations.component';\n\n\nexport const AdminLayoutRoutes: Routes = [\n    { path: 'dashboard', component: DashboardComponent },\n    { path: 'configuration', component: ConfigurationsComponent },\n    { path: 'user/:formId', component: CommonviewpageComponent },\n    { path: 'user/:formId/:id', component: UserprofileComponent },\n    { path: 'department/:formId', component: CommonviewpageComponent },\n    { path: 'department/:formId/:id', component: DepartmentComponent },\n    { path: 'letter/:formId', component: LetterviewComponent },\n    { path: 'letter/:formId/:id', component: LetterComponent },\n    { path: 'select', component: MatselectComponent },\n];\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2NvbW1vbnZpZXdwYWdlL2NvbW1vbnZpZXdwYWdlLmNvbXBvbmVudC5jc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-commonviewpage',\n  templateUrl: './commonviewpage.component.html',\n  styleUrls: ['./commonviewpage.component.css']\n})\nexport class CommonviewpageComponent implements OnInit {\n  formId = 0;\n  constructor(private activatedRoute: ActivatedRoute) {\n    this.activatedRoute\n      .params\n      .subscribe(params => {\n        this.formId = parseInt(params['formId'], 10);\n      });\n  }\n\n  ngOnInit() {\n  }\n\n  loadPage() {\n  }\n\n  newPage() {\n  }\n}\n","module.exports = \".list-group>li {\\n  border-bottom: 1px solid #94a1b7;\\n  padding-left: 0px;\\n  padding-bottom: 1px;\\n  padding-right: 2px;\\n}\\n\\n#tab-group {\\n  height: 100%;\\n}\\n\\n::ng-deep .mat-tab-body-wrapper {\\n  height: 100%;\\n}\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnZXMvY29uZmlndXJhdGlvbnMvY29uZmlndXJhdGlvbnMuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGdDQUFnQztFQUNoQyxpQkFBaUI7RUFDakIsbUJBQW1CO0VBQ25CLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLFlBQVk7QUFDZDs7QUFFQTtFQUNFLFlBQVk7QUFDZCIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2NvbmZpZ3VyYXRpb25zL2NvbmZpZ3VyYXRpb25zLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIubGlzdC1ncm91cD5saSB7XG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjOTRhMWI3O1xuICBwYWRkaW5nLWxlZnQ6IDBweDtcbiAgcGFkZGluZy1ib3R0b206IDFweDtcbiAgcGFkZGluZy1yaWdodDogMnB4O1xufVxuXG4jdGFiLWdyb3VwIHtcbiAgaGVpZ2h0OiAxMDAlO1xufVxuXG46Om5nLWRlZXAgLm1hdC10YWItYm9keS13cmFwcGVyIHtcbiAgaGVpZ2h0OiAxMDAlO1xufVxuIl19 */\"","import { Component, OnInit } from '@angular/core';\nimport { Toast } from 'app/common/models/toast';\nimport { CommonService } from 'app/common/services/common.service';\nimport { NgxSpinnerService } from 'ngx-spinner';\n\n@Component({\n  selector: 'app-configurations',\n  templateUrl: './configurations.component.html',\n  styleUrls: ['./configurations.component.css']\n})\nexport class ConfigurationsComponent implements OnInit {\n  toast: Toast;\n  listArray: any = [];\n  listvalueArray: any[] = [];\n  currentList: any = {\n    listId: 0,\n    description: ''\n  };\n  constructor(private serv: CommonService, private spinner: NgxSpinnerService) {\n    this.toast = new Toast();\n  }\n\n  ngOnInit() {\n    this.loadAllList();\n  }\n\n  loadAllList(): void {\n    this.spinner.show();\n    this.serv.httpCllaUrl('common/ParameterLists')\n      .subscribe((data) => {\n        this.listArray = data;\n        this.loadListvalues(data[0].listId);\n        this.spinner.hide();\n      },\n        (error) => {\n          this.spinner.hide();\n          this.toast.Danger(error);\n        });\n  }\n\n  loadListvalues(listId: number) {\n    // tslint:disable-next-line: triple-equals\n    const rs = this.listArray.find(e => e.listId == listId);\n    this.currentList.listId = rs.listId;\n    this.currentList.description = rs.description;\n    this.listvalueArray = [];\n    this.serv.httpGetListValue(this.currentList.listId, true)\n      .subscribe((data) => {\n        if (data.length > 0) {\n          data.forEach(e => {\n            this.listvalueArray.push({\n              id: e.id,\n              value: e.value,\n              isEdit: false\n            });\n          });\n        } else {\n          this.listvalueArray.push({\n            id: 0,\n            value: '',\n            isEdit: true\n          });\n        }\n      },\n        (error) => {\n          this.toast.Danger({ message: error });\n        }\n      );\n  }\n\n  updateListValue(obj: any) {\n    if (obj.value != '') {\n      this.spinner.show();\n      this.serv.httpPost({ ListId: this.currentList.listId, ListValueId: obj.id, Value: obj.value }, 0, obj.id)\n        .subscribe((data) => {\n          this.spinner.hide();\n          this.toast.Success({ message: 'Successfully updated' });\n          this.loadListvalues(this.currentList.listId);\n        },\n          (error) => {\n            this.spinner.hide();\n            this.toast.Danger({ message: error });\n          });\n    }\n  }\n\n  addNewRow(obj: any) {\n    if (obj.value != '') {\n      this.listvalueArray.push({\n        id: 0,\n        value: '',\n        isEdit: true\n      });\n    }\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2Rhc2hib2FyZC9kYXNoYm9hcmQuY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\nimport { User } from 'app/common/models/user';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})\nexport class DashboardComponent implements OnInit {\n  CurrentUser: any;\n  constructor() {\n    this.CurrentUser = JSON.parse(localStorage.getItem('currentUser'));\n  }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2RlcGFydG1lbnQvZGVwYXJ0bWVudC5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\nimport { ErrorStateMatcher } from '@angular/material';\nimport { FormControl, FormGroupDirective, NgForm, FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Toast } from 'app/common/models/toast';\nimport { CommonService } from 'app/common/services/common.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Department } from 'app/common/models/department';\n\n\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\n  updateClicked = false;\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const invalidCtrl = !!(control && control.invalid);\n    const invalidParent = !!(control && control.parent && control.parent.invalid && control.parent.dirty);\n    return this.updateClicked && (invalidCtrl || invalidParent);\n  }\n}\n\n@Component({\n  selector: 'app-department',\n  templateUrl: './department.component.html',\n  styleUrls: ['./department.component.css']\n})\nexport class DepartmentComponent implements OnInit {\n\n  department: Department;\n  isNewDepartment = false;\n  toast: Toast;\n  frmDepartment: FormGroup;\n  matcher = new MyErrorStateMatcher();\n\n  constructor(private serv: CommonService, private router: Router\n    , private activatedRoute: ActivatedRoute, private formBuilder: FormBuilder) {\n    this.department = new Department();\n    this.toast = new Toast();\n    this.frmDepartment = this.formBuilder.group({\n      Id: [0, Validators.compose([])],\n      ParentId: [0, Validators.compose([])],\n      Departmentcode: ['', Validators.compose([Validators.required, this.noWhitespaceValidator])],\n      DepartmentName: ['', Validators.compose([Validators.required, this.noWhitespaceValidator])],\n      ExtendedDescription: ['', Validators.compose([])],\n      DepStatus: [1, Validators.compose([])],\n    });\n    this.activatedRoute\n      .params\n      .subscribe(params => {\n        this.department.Id = Number.isNaN(params['id']) ? 0 : Number(params['id']);\n        if (this.department.Id !== 0) {\n          this.isNewDepartment = false;\n        } else {\n          this.isNewDepartment = true;\n        }\n      });\n  }\n\n  ngOnInit() {\n    if (this.department.Id !== 0) {\n      this.loadDepartment(this.department.Id);\n    }\n  }\n\n  noWhitespaceValidator(control: FormControl) {\n    const isWhitespace = (control.value || '').trim().length === 0;\n    const isValid = !isWhitespace;\n    return isValid ? null : { whitespace: true };\n  }\n\n  loadDepartment(id: number): void {\n    if (id !== undefined && id !== 0) {\n      this.serv.httpGetData(1001, id)\n        .subscribe((data) => {\n          this.department = data;\n        },\n          (error) => {\n            this.toast.Danger({ message: error });\n          });\n    }\n  }\n\n  updateDepartment(): void {\n    this.matcher.updateClicked = true;\n    if (!this.frmDepartment.invalid) {\n\n      this.serv.httpPost(this.department, 1001, this.department.Id)\n        .subscribe((data) => {\n          this.department.Id = Number(data['id']);\n          this.toast.Success({ message: 'Successfully updated' });\n          setTimeout(() => {\n            this.router.navigateByUrl('/department/1000/' + this.department.Id);\n            this.router.routeReuseStrategy.shouldReuseRoute = () => {\n              return false;\n            };\n          }, 200);\n        },\n          (error) => {\n            this.toast.Danger({ message: error });\n          });\n    }\n  }\n\n  newDepartment(): void {\n    this.router.navigateByUrl('/department/1001/0');\n    this.router.routeReuseStrategy.shouldReuseRoute = () => {\n      return false;\n    };\n  }\n\n  back(): void {\n    this.router.navigateByUrl('/department/1001');\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2xldHRlci9sZXR0ZXIuY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport { FormControl, FormGroupDirective, NgForm, FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { CommonService } from '../../common/services/common.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Pair } from '../../common/models/pair';\nimport { Toast } from '../../common/models/toast';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport { Letter } from 'app/common/models/letter';\n\n\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\n  updateClicked = false;\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const invalidCtrl = !!(control && control.invalid && control.parent.dirty);\n    const invalidParent = !!(control && control.dirty && control.parent && control.parent.invalid && control.parent.dirty);\n    return this.updateClicked && (invalidCtrl || invalidParent);\n  }\n}\n\n@Component({\n  selector: 'app-letter',\n  templateUrl: './letter.component.html',\n  styleUrls: ['./letter.component.css']\n})\nexport class LetterComponent implements OnInit {\n  letter: Letter;\n  isNewLetter = false;\n  toast: Toast;\n  frmLetter: FormGroup;\n  matcher = new MyErrorStateMatcher();\n  letterContant: string = '';\n  constructor(private serv: CommonService, private router: Router\n    , private activatedRoute: ActivatedRoute, private spinner: NgxSpinnerService,\n    private formBuilder: FormBuilder) {\n    this.letter = new Letter();\n    this.toast = new Toast();\n    this.frmLetter = this.formBuilder.group(\n      {\n        Id: [0, Validators.compose([])],\n        LetterCode: [{ value: 'AUTO GENERATED CODE', disabled: true }, Validators.compose([])],\n        LetterRefNO: ['', Validators.compose([Validators.required, this.noWhitespaceValidator])],\n        LetterCategory: [1, Validators.compose([])],\n        DepartmentId: [1, Validators.compose([])],\n        ReferenceLetter: ['', Validators.compose([])],\n        FromAddress: ['', Validators.compose([Validators.required, this.noWhitespaceValidator])],\n        ToAddress: ['', Validators.compose([Validators.required])],\n        ToWhom: ['', Validators.compose([Validators.required])],\n        SendOrReceive: [1, Validators.compose([])],\n        PostType: [1, Validators.compose([])],\n        Subject: ['', Validators.compose([])],\n        SendOrReceiveDate: [new Date(), Validators.compose([])]\n      }\n    );\n    this.activatedRoute\n      .params\n      .subscribe(params => {\n        this.letter.Id = Number.isNaN(params.id) ? 0 : Number(params.id);\n        if (this.letter.Id !== 0) {\n          this.isNewLetter = false;\n          this.loadLetter(this.letter.Id);\n        } else {\n          this.isNewLetter = true;\n        }\n      });\n  }\n\n  ngOnInit() {\n  }\n\n  noWhitespaceValidator(control: FormControl) {\n    const isWhitespace = (control.value || '').trim().length === 0;\n    const isValid = !isWhitespace;\n    return isValid ? null : { whitespace: true };\n  }\n\n  loadLetter(id: number): void {\n    if (id !== undefined && id !== 0) {\n      this.spinner.show();\n      this.serv.httpGetData(1003, id)\n        .subscribe((data) => {\n          this.letter = data;\n          this.letterContant = this.letter.LetterContant;\n          this.spinner.hide();\n        },\n          (error) => {\n            this.spinner.hide();\n            this.toast.Danger({ message: error });\n          });\n    }\n  }\n\n  updateLetter(): void {\n    this.matcher.updateClicked = true;\n    if (!this.frmLetter.invalid) {\n      this.spinner.show();\n      this.letter.LetterContant = this.letterContant;\n      this.serv.httpPost(this.letter, 1003, this.letter.Id)\n        .subscribe((data) => {\n          this.spinner.hide();\n          this.toast.Success({ message: 'Successfully updated' });\n          setTimeout(() => {\n            // tslint:disable-next-line: no-string-literal\n            this.router.navigateByUrl('/letter/1003/' + data['id']);\n            this.router.routeReuseStrategy.shouldReuseRoute = () => {\n              return false;\n            };\n          }, 0);\n        },\n          (error) => {\n            this.spinner.hide();\n            this.toast.Danger({ message: error });\n          });\n    }\n  }\n\n  newLetter(): void {\n    this.router.navigateByUrl('/letter/1003/0');\n    this.router.routeReuseStrategy.shouldReuseRoute = () => {\n      return false;\n    };\n  }\n\n  back(): void {\n    this.router.navigateByUrl('/letter/1003');\n  }\n}\n\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2xldHRlcnZpZXcvbGV0dGVydmlldy5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { MatPaginator, MatTableDataSource, Sort } from '@angular/material';\nimport { CommonService } from 'app/common/services/common.service';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport { Toast } from 'app/common/models/toast';\n\n@Component({\n  selector: 'app-letterview',\n  templateUrl: './letterview.component.html',\n  styleUrls: ['./letterview.component.css']\n})\nexport class LetterviewComponent implements OnInit {\n\n  tost: Toast;\n  details: any = {};\n  columns: any[];\n  sortedData: any[];\n  dataSource: MatTableDataSource<any>;\n  currentPage = 0;\n  pageSize = 50;\n  array: any;\n  totalSize = 0;\n  departnemtId = 1;\n  frmDate = new Date();\n  toDate = new Date(new Date().setDate(new Date().getDate() + 1));\n  filter = 'null';\n\n\n  @ViewChild(MatPaginator, { static: false }) paginator: MatPaginator;\n\n  constructor(private commonService: CommonService, private activatedRoute: ActivatedRoute,\n    private spinner: NgxSpinnerService, private router: Router) {\n    this.tost = new Toast();\n  }\n\n  newLetter(): void {\n    this.router.navigateByUrl('/letter/1003/0');\n    this.router.routeReuseStrategy.shouldReuseRoute = () => {\n      return false;\n    };\n  }\n\n  ViewButtonClicked(path: string, formId: number, Id: number) {\n    this.router.navigateByUrl('/' + path + '/' + formId + '/' + Id);\n  }\n\n  NewButtonClicked(path: string, formId: number) {\n    this.router.navigateByUrl('/' + path + '/' + formId + '/' + 0);\n    this.router.routeReuseStrategy.shouldReuseRoute = () => {\n      return false;\n    };\n  }\n  ngOnInit() {\n    this.loadDetails();\n  }\n\n  loadDetails(): void {\n    this.activatedRoute\n      .params\n      .subscribe(params => {\n        this.spinner.show();\n        const url = 'Letter/0/' + this.pageSize + '/' + this.filter + '/' + this.departnemtId + '/'\n          + this.frmDate.toDateString() + '/' + this.toDate.toDateString();\n        this.commonService.httpCllaUrl(url)\n          .subscribe((data) => {\n            this.initData(data);\n            this.spinner.hide();\n          },\n            (error) => {\n              this.spinner.hide();\n              this.tost.Danger({ message: error });\n            }\n          );\n      });\n  }\n\n  findData() {\n    this.loadDetails();\n  }\n\n  initData(data: any) {\n    this.details = data;\n    this.details.Columns.sort((a, b) => {\n      if (a.DisplayOrder < b.DisplayOrder) { return -1; }\n      if (a.DisplayOrder > b.DisplayOrder) { return 1; }\n      return 0;\n    });\n    this.sortedData = this.details.Details.slice();\n    this.array = this.sortedData;\n    this.makpage(this.sortedData, false);\n    this.columns = this.details.Columns;\n  }\n\n  sortData(sort: Sort) {\n    const data = this.details.Details.slice();\n    if (!sort.active || sort.direction === '') {\n      this.sortedData = data;\n      this.makpage(this.sortedData, true);\n      return;\n    }\n\n    this.sortedData = data.sort((a, b) => {\n      const isAsc = sort.direction === 'asc';\n      return this.compare(a[sort.active], b[sort.active], isAsc);\n    });\n    this.makpage(this.sortedData, true);\n  }\n\n  compare(a, b, isAsc) {\n    return (a < b ? -1 : 1) * (isAsc ? 1 : -1);\n  }\n  public handlePage(e: any) {\n    this.currentPage = e.pageIndex;\n    this.pageSize = e.pageSize;\n    this.iterator(this.array);\n  }\n\n  private makpage(response: any, isSort: boolean) {\n    this.dataSource = new MatTableDataSource<Element>(response);\n    this.dataSource.paginator = this.paginator;\n    this.totalSize = this.array.length;\n    this.iterator((isSort) ? response : this.array);\n  }\n\n  private iterator(arr: any) {\n    const end = (this.currentPage + 1) * this.pageSize;\n    const start = this.currentPage * this.pageSize;\n    const part = arr.slice(start, end);\n    this.dataSource = part;\n  }\n\n  applyFilter(filterValue: string) {\n    this.filter = filterValue;\n    this.dataSource = new MatTableDataSource<Element>(this.array);\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n    this.dataSource.paginator = this.paginator;\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n    this.makpage(this.dataSource.filteredData, true);\n  }\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL21hdHNlbGVjdC9tYXRzZWxlY3QuY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit, ViewChild, AfterViewInit, OnDestroy, Input, Output, EventEmitter, forwardRef } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { ReplaySubject, Subject } from 'rxjs';\nimport { MatSelect } from '@angular/material';\nimport { takeUntil, take } from 'rxjs/operators';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { CommonService } from 'app/common/services/common.service';\nimport { Toast } from 'app/common/models/toast';\n\nconst customValueProvider = {\n  provide: NG_VALUE_ACCESSOR,\n  // tslint:disable-next-line: no-use-before-declare\n  useExisting: forwardRef(() => MatselectComponent),\n  multi: true\n};\n\n@Component({\n  selector: 'app-matselect',\n  templateUrl: './matselect.component.html',\n  styleUrls: ['./matselect.component.css'],\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatselectComponent),\n    multi: true\n  }]\n})\nexport class MatselectComponent implements OnInit, AfterViewInit, OnDestroy, ControlValueAccessor {\n  // protected options: any[] = [{ Id: 1, Value: 'option1' }, { Id: 2, Value: 'option2' }, { Id: 3, Value: 'option3' }];\n  public frmctrlMatselect: FormControl = new FormControl();\n  public frmCtrlFilterCtrl: FormControl = new FormControl();\n  public filteredoptions: ReplaySubject<any[]> = new ReplaySubject<any[]>(1);\n\n  toast: Toast;\n\n  @Input()\n  options: any[];\n\n  @Input()\n  listId: any = 0;\n\n  @Input()\n  isaParameter = false;\n\n  @Input()\n  placeholder: string;\n\n  @Input()\n  InitValue: any;\n\n  @Input()\n  DefaultOption = false;\n\n  @Output()\n  SelectedValueChanged: EventEmitter<any> = new EventEmitter<any>();\n\n  @ViewChild('selectId', { static: false }) selectId: MatSelect;\n\n  protected onDestroy = new Subject<void>();\n\n\n  constructor(private serv: CommonService) {\n    this.toast = new Toast();\n  }\n\n  ngOnInit() {\n    if (this.listId > 0) {\n      this.getListValues(this.listId, this.isaParameter);\n    } else {\n      this.frmctrlMatselect.setValue((this.InitValue) ? this.InitValue.toString() : this.options[0]);\n      this.filteredoptions.next(this.options.slice());\n    }\n\n    this.frmCtrlFilterCtrl.valueChanges\n      .pipe(takeUntil(this.onDestroy))\n      .subscribe(() => {\n        this.filterBanks();\n      });\n  }\n\n  ngAfterViewInit() {\n    // this.setInitialValue();\n  }\n\n  getListValues(listId: number, isaParameter: boolean) {\n    this.serv.httpGetListValue(listId, isaParameter)\n      .subscribe((data) => {\n        this.options = data;\n        this.frmctrlMatselect.setValue((this.InitValue) ? this.InitValue.toString() : this.options[0]);\n        this.filteredoptions.next(this.options.slice());\n      },\n        (error) => {\n          this.toast.Danger({ message: error });\n        }\n      );\n  }\n\n  ngOnDestroy() {\n    this.onDestroy.next();\n    this.onDestroy.complete();\n  }\n\n  protected setInitialValue() {\n    this.filteredoptions\n      .pipe(take(1), takeUntil(this.onDestroy))\n      .subscribe(() => {\n        this.selectId.compareWith = (a: any, b: any) => a && b && a.id === b.id;\n      });\n  }\n\n  protected filterBanks() {\n    if (!this.options) {\n      return;\n    }\n    let search = this.frmCtrlFilterCtrl.value;\n    if (!search) {\n      this.filteredoptions.next(this.options.slice());\n      return;\n    } else {\n      search = search.toLowerCase();\n    }\n    this.filteredoptions.next(\n      this.options.filter(option => option.value.toLowerCase().indexOf(search) > -1)\n    );\n  }\n\n  OnValueChanged() {\n    this.SelectedValueChanged.emit(this.frmctrlMatselect.value);\n  }\n\n\n  get value(): any { return this.frmctrlMatselect.value; }\n\n  set value(v: any) {\n    if (v !== this.frmctrlMatselect.value) {\n      this.frmctrlMatselect.setValue(v);\n    }\n  }\n\n  writeValue(obj: any): void {\n    if (obj) {\n      this.frmctrlMatselect.setValue(obj);\n    }\n  }\n\n  registerOnChange(fn: any): void {\n  }\n  registerOnTouched(fn: any): void {\n  }\n  setDisabledState?(isDisabled: boolean): void {\n\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3VzZXJwcm9maWxlL3VzZXJwcm9maWxlLmNvbXBvbmVudC5jc3MifQ== */\"","import { Component, OnInit, AfterViewInit } from '@angular/core';\nimport { User } from '../../common/models/user';\nimport { CommonService } from '../../common/services/common.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Pair } from '../../common/models/pair';\nimport { Toast } from '../../common/models/toast';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport { FormGroup, FormBuilder, Validators, FormControl, FormGroupDirective, NgForm } from '@angular/forms';\nimport { ErrorStateMatcher } from '@angular/material/core';\n\n\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\n  updateClicked = false;\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const invalidCtrl = !!(control && control.invalid && control.parent.dirty);\n    const invalidParent = !!(control && control.dirty && control.parent && control.parent.invalid && control.parent.dirty);\n    return this.updateClicked && (invalidCtrl || invalidParent);\n  }\n}\n\n@Component({\n  selector: 'app-userprofile',\n  templateUrl: './userprofile.component.html',\n  styleUrls: ['./userprofile.component.css']\n})\nexport class UserprofileComponent implements OnInit, AfterViewInit {\n  user: User;\n  isNewUser = false;\n  toast: Toast;\n  frmUserProfile: FormGroup;\n  matcher = new MyErrorStateMatcher();\n  departments: Pair[] = [];\n\n  titles: any[] = [{ id: 'Mr.', value: 'Mr.' },\n  { id: 'Mrs.', value: 'Mrs.' },\n  { id: 'Ms.', value: 'Ms.' },\n  { id: 'Miss.', value: 'Miss.' }];\n\n  constructor(private serv: CommonService, private router: Router\n    , private activatedRoute: ActivatedRoute, private spinner: NgxSpinnerService,\n    private formBuilder: FormBuilder) {\n    this.user = new User();\n    this.toast = new Toast();\n    this.frmUserProfile = this.formBuilder.group(\n      {\n        Title: ['Mr.'],\n        FullName: ['', Validators.compose([Validators.required, this.noWhitespaceValidator])],\n        Email: ['', Validators.compose([Validators.required, Validators.email])],\n        DisplayName: ['', Validators.compose([Validators.required, this.noWhitespaceValidator])],\n        UserName: ['', Validators.compose([Validators.required, this.noWhitespaceValidator])],\n        UserLevel: [1],\n        Branch: [''],\n        Password: [''],\n        ConfirmPassword: [''],\n        DepartmentId: [1]\n      },\n      {\n        validator: this.checkPasswords\n      }\n    );\n    this.activatedRoute\n      .params\n      .subscribe(params => {\n        this.user.Id = Number.isNaN(params.id) ? 0 : Number(params.id);\n        if (this.user.Id !== 0) {\n          this.isNewUser = false;\n          this.loadUser(this.user.Id);\n        } else {\n          this.isNewUser = true;\n        }\n      });\n  }\n\n  ngOnInit() {\n  }\n\n  checkPasswords(group: FormGroup) {\n    const pass = group.controls.Password.value;\n    const confirmPass = group.controls.ConfirmPassword.value;\n    group.controls.ConfirmPassword.setErrors(pass === confirmPass ? null : { notSame: true });\n    return pass === confirmPass ? null : { notSame: true };\n  }\n\n  noWhitespaceValidator(control: FormControl) {\n    const isWhitespace = (control.value || '').trim().length === 0;\n    const isValid = !isWhitespace;\n    return isValid ? null : { whitespace: true };\n  }\n\n  ngAfterViewInit() {\n\n  }\n\n  loadUser(id: number): void {\n    if (id != undefined && id != 0) {\n      this.spinner.show();\n      this.serv.httpGetData(1002, id)\n        .subscribe((data) => {\n          this.user = data;\n          this.spinner.hide();\n        },\n          (error) => {\n            this.spinner.hide();\n            this.toast.Danger({ message: error });\n          });\n    }\n  }\n\n  updateUser(): void {\n    this.matcher.updateClicked = true;\n    if (!this.frmUserProfile.invalid) {\n      this.spinner.show();\n      this.serv.httpPost(this.user, 1002, this.user.Id)\n        .subscribe((data) => {\n          this.spinner.hide();\n          this.toast.Success({ message: 'Successfully updated' });\n          setTimeout(() => {\n            // tslint:disable-next-line: no-string-literal\n            this.router.navigateByUrl('/user/1002/' + data['id']);\n            this.router.routeReuseStrategy.shouldReuseRoute = () => {\n              return false;\n            };\n          }, 0);\n        },\n          (error) => {\n            this.spinner.hide();\n            this.toast.Danger({ message: error });\n          });\n    }\n  }\n\n  newUser(): void {\n    this.router.navigateByUrl('/user/1002/0');\n    this.router.routeReuseStrategy.shouldReuseRoute = () => {\n      return false;\n    };\n  }\n\n  back(): void {\n    this.router.navigateByUrl('/user/1002');\n  }\n}\n\n","module.exports = \".buttonlist {\\n  padding-bottom: 0px;\\n  height: 30px;\\n  margin-top: 0px;\\n  background-color: #ebebeb;\\n  padding-left: 15px;\\n}\\n\\n@media (min-width: 991px) {\\n  .buttonlist {\\n    padding-bottom: 0px;\\n    height: 40px;\\n    margin-top: 0px;\\n    background-color: #ebebeb;\\n    padding-left: 15px;\\n    padding-top: 5px;\\n  }\\n}\\n\\n.fixed_header {\\n  table-layout: fixed;\\n  border-collapse: collapse;\\n}\\n\\n.fixed_header tbody {\\n  display: block;\\n  width: 100%;\\n  overflow: auto;\\n  max-height: 300px;\\n}\\n\\n.fixed_header thead tr {\\n  display: block;\\n}\\n\\n.fixed_header th,\\n.fixed_header td {\\n  text-align: left;\\n  width: 1%;\\n}\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnZXMvdmlldy92aWV3LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxtQkFBbUI7RUFDbkIsWUFBWTtFQUNaLGVBQWU7RUFDZix5QkFBeUI7RUFDekIsa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0U7SUFDRSxtQkFBbUI7SUFDbkIsWUFBWTtJQUNaLGVBQWU7SUFDZix5QkFBeUI7SUFDekIsa0JBQWtCO0lBQ2xCLGdCQUFnQjtFQUNsQjtBQUNGOztBQUVBO0VBQ0UsbUJBQW1CO0VBQ25CLHlCQUF5QjtBQUMzQjs7QUFFQTtFQUNFLGNBQWM7RUFDZCxXQUFXO0VBQ1gsY0FBYztFQUNkLGlCQUFpQjtBQUNuQjs7QUFHQTtFQUNFLGNBQWM7QUFDaEI7O0FBRUE7O0VBRUUsZ0JBQWdCO0VBQ2hCLFNBQVM7QUFDWCIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3ZpZXcvdmlldy5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmJ1dHRvbmxpc3Qge1xuICBwYWRkaW5nLWJvdHRvbTogMHB4O1xuICBoZWlnaHQ6IDMwcHg7XG4gIG1hcmdpbi10b3A6IDBweDtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ViZWJlYjtcbiAgcGFkZGluZy1sZWZ0OiAxNXB4O1xufVxuXG5AbWVkaWEgKG1pbi13aWR0aDogOTkxcHgpIHtcbiAgLmJ1dHRvbmxpc3Qge1xuICAgIHBhZGRpbmctYm90dG9tOiAwcHg7XG4gICAgaGVpZ2h0OiA0MHB4O1xuICAgIG1hcmdpbi10b3A6IDBweDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWJlYmViO1xuICAgIHBhZGRpbmctbGVmdDogMTVweDtcbiAgICBwYWRkaW5nLXRvcDogNXB4O1xuICB9XG59XG5cbi5maXhlZF9oZWFkZXIge1xuICB0YWJsZS1sYXlvdXQ6IGZpeGVkO1xuICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xufVxuXG4uZml4ZWRfaGVhZGVyIHRib2R5IHtcbiAgZGlzcGxheTogYmxvY2s7XG4gIHdpZHRoOiAxMDAlO1xuICBvdmVyZmxvdzogYXV0bztcbiAgbWF4LWhlaWdodDogMzAwcHg7XG59XG5cblxuLmZpeGVkX2hlYWRlciB0aGVhZCB0ciB7XG4gIGRpc3BsYXk6IGJsb2NrO1xufVxuXG4uZml4ZWRfaGVhZGVyIHRoLFxuLmZpeGVkX2hlYWRlciB0ZCB7XG4gIHRleHQtYWxpZ246IGxlZnQ7XG4gIHdpZHRoOiAxJTtcbn1cbiJdfQ== */\"","import { Component, OnInit, Pipe, PipeTransform, Input, Output, EventEmitter, ViewChild } from '@angular/core';\nimport { CommonService } from '../../common/services/common.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Sort, MatTableDataSource, MatPaginator } from '@angular/material';\nimport { Toast } from '../../common/models/toast';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport { formatDate } from '@angular/common';\n\n@Component({\n  selector: 'app-view',\n  templateUrl: './view.component.html',\n  styleUrls: ['./view.component.css']\n})\nexport class ViewComponent implements OnInit {\n  _toast: Toast;\n  details: any = {};\n  columns: any[];\n  sortedData: any[];\n  dataSource: MatTableDataSource<any>;\n  currentPage = 0;\n  pageSize = 50;\n  array: any;\n  totalSize = 0;\n\n  @ViewChild(MatPaginator, { static: false }) paginator: MatPaginator;\n\n  @Input()\n  isViewPage = true;\n\n  @Input()\n  formId: number;\n\n  @Input()\n  courseId: number;\n\n  @Input()\n  IsBtnlstHiddn = false;\n\n  @Output()\n  viewButtonClicked: EventEmitter<number> = new EventEmitter<number>();\n\n  @Output()\n  newButtonClicked: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private commonService: CommonService, private activatedRoute: ActivatedRoute,\n    private spinner: NgxSpinnerService, private router: Router) {\n    this._toast = new Toast();\n  }\n\n  ViewButtonClicked(path: string, formId: number, Id: number) {\n    this.router.navigateByUrl('/' + path + '/' + formId + '/' + Id);\n  }\n\n  onViewButtonClicked(Id: number) {\n    this.viewButtonClicked.emit(Id);\n  }\n\n  NewButtonClicked(path: string, formId: number) {\n    this.router.navigateByUrl('/' + path + '/' + formId + '/' + 0);\n    this.router.routeReuseStrategy.shouldReuseRoute = () => {\n      return false;\n    };\n  }\n\n  onNewButtonClicked() {\n    this.newButtonClicked.emit(0);\n  }\n\n  ngOnInit() {\n    this.loadDetails();\n  }\n\n  loadDetails(): void {\n    this.activatedRoute\n      .params\n      .subscribe(params => {\n        this.spinner.show();\n        let frmId: number = params.formId;\n        frmId = (this.isViewPage) ? frmId : this.formId;\n        this.commonService.httpGetList({ formId: frmId, start: 0, limit: this.pageSize, filter: 'null' })\n          .subscribe((data) => {\n            this.details = data;\n            this.details.Columns.sort((a, b) => {\n              if (a.DisplayOrder < b.DisplayOrder) { return -1; }\n              if (a.DisplayOrder > b.DisplayOrder) { return 1; }\n              return 0;\n            });\n            this.sortedData = this.details.Details.slice();\n            this.array = this.sortedData;\n            this.makpage(this.sortedData, false);\n            this.columns = this.details.Columns;\n            this.spinner.hide();\n          },\n            (error) => {\n              this.spinner.hide();\n              this._toast.Danger({ message: error });\n            }\n          );\n      });\n  }\n\n  sortData(sort: Sort) {\n    const data = this.details.Details.slice();\n    if (!sort.active || sort.direction === '') {\n      this.sortedData = data;\n      this.makpage(this.sortedData, true);\n      return;\n    }\n\n    this.sortedData = data.sort((a, b) => {\n      const isAsc = sort.direction === 'asc';\n      return this.compare(a[sort.active], b[sort.active], isAsc);\n    });\n    this.makpage(this.sortedData, true);\n  }\n\n  compare(a, b, isAsc) {\n    return (a < b ? -1 : 1) * (isAsc ? 1 : -1);\n  }\n  public handlePage(e: any) {\n    this.currentPage = e.pageIndex;\n    this.pageSize = e.pageSize;\n    this.iterator(this.array);\n  }\n\n  private makpage(response: any, isSort: boolean) {\n    this.dataSource = new MatTableDataSource<Element>(response);\n    this.dataSource.paginator = this.paginator;\n    this.totalSize = this.array.length;\n    this.iterator((isSort) ? response : this.array);\n  }\n\n  private iterator(arr: any) {\n    const end = (this.currentPage + 1) * this.pageSize;\n    const start = this.currentPage * this.pageSize;\n    const part = arr.slice(start, end);\n    this.dataSource = part;\n  }\n\n  applyFilter(filterValue: string) {\n    this.dataSource = new MatTableDataSource<Element>(this.array);\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n    this.dataSource.paginator = this.paginator;\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n    this.makpage(this.dataSource.filteredData, true);\n  }\n}\n\n@Pipe({ name: 'Columns' })\nexport class ColumnsPipe implements PipeTransform {\n  transform(value: any, ColumnName: string): any[] {\n    if (value) {\n      const keyArr: any[] = Object.keys(value);\n      const dataArr = [];\n      keyArr.forEach((key: any) => {\n        if (ColumnName === key) {\n          const dt = !Number.isNaN(Date.parse(value[key])) ? formatDate(value[key], 'MM/dd/yyyy', 'en-US') : value[key];\n          dataArr.push(dt);\n        }\n      });\n      return dataArr;\n    }\n  }\n}\n"],"sourceRoot":""}